{
  "posts": [
    {
      "id": 1,
      "title": "How Senior Engineers Build React Apps",
      "description": "Senior engineers with expertise in React have a deep understanding of the framework’s core principles and best practices, as well as the tools and techniques needed to create scalable, maintainable code.",
      "content": "<p id=\"9f15\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">React has become one of the most popular and widely used JavaScript frameworks in recent years, thanks to its powerful capabilities for building dynamic, interactive web applications. Senior engineers with expertise in React have a deep understanding of the framework&rsquo;s core principles and best practices, as well as the tools and techniques needed to create scalable, maintainable code.</p>\n<p id=\"509a\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">In this article, we&rsquo;ll explore the key strategies that senior engineers use to build React apps that are both powerful and efficient. We&rsquo;ll look at the core principles of React, the best practices for structuring and organizing your code, and the tools and techniques that can help you optimize your app&rsquo;s performance and scalability.</p>\n<p id=\"483e\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\"><mark className=\"ait aiu ao\">Whether</mark>&nbsp;you&rsquo;re a seasoned React developer or just starting out, understanding these strategies can help you take your skills to the next level and build apps that are both effective and elegant. So let&rsquo;s dive in and take a closer look at how senior engineers build React apps.</p>\n<h2 id=\"9920\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Core Principles of React</h2>\n<p id=\"3332\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">At the heart of React lies a set of core principles that underpin the entire framework. Understanding these principles is key to building scalable, maintainable React apps.</p>\n<p id=\"e6ac\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">One of the most fundamental principles of React is the concept of &ldquo;one-way data flow&rdquo;. This means that data flows in a single direction through your app, from parent components down to child components. By structuring your app in this way, you can create a clear and predictable data flow that makes it easier to manage and debug your code.</p>\n<p id=\"11a3\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">Another core principle of React is the use of a `virtual DOM` (Document Object Model). The virtual DOM is an abstraction of the browser&rsquo;s native DOM, which allows React to update the UI more efficiently by minimizing the number of actual DOM updates required. By using the virtual DOM, React can update the UI in a way that is both fast and responsive, without requiring unnecessary re-renders or updates.</p>\n<h1 id=\"3f42\" className=\"xs xf sm al xg xt xu xv mz xw xx xy ne xz ya yb yc yd ye yf yg yh yi yj yk yl bp\" data-selectable-paragraph=\"\">Best Practices for Structuring and Organizing Your Code</h1>\n<p id=\"e7e8\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Building scalable, maintainable React apps requires careful planning and organization. Here are some best practices to keep in mind:</p>\n<h2 id=\"704d\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Component-based architecture</h2>\n<p id=\"0d76\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">One of the key benefits of React is its component-based architecture. By breaking your app down into reusable, modular components, you can create a more flexible and maintainable codebase. Each component should have a clear and specific responsibility, and should be designed to be as self-contained as possible.</p>\n<h2 id=\"2d20\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Separation of concerns</h2>\n<p id=\"6bcc\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Another important principle of building maintainable React apps is the separation of concerns. This means separating your code into distinct layers, each with its own responsibilities. For example, you might have a data layer that handles data fetching and manipulation, a presentation layer that handles UI rendering, and a container layer that manages the interaction between the two.</p>\n<h2 id=\"b5a8\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Code reuse</h2>\n<p id=\"7559\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Code reuse is another key strategy for building scalable React apps. By reusing code wherever possible, you can reduce duplication and improve the overall efficiency of your codebase. This might involve creating reusable components or abstracting common functionality into utility functions or libraries.</p>\n<h2 id=\"2ba7\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Scalable folder structure</h2>\n<p id=\"8f42\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Finally, organizing your code into a scalable folder structure can help you manage your codebase more effectively. This might involve grouping related components or modules into separate directories, or using a naming convention that makes it easy to locate specific files or components.</p>\n<h1 id=\"dc65\" className=\"xs xf sm al xg xt xu xv mz xw xx xy ne xz ya yb yc yd ye yf yg yh yi yj yk yl bp\" data-selectable-paragraph=\"\">Tools and Techniques for Optimizing Performance and Scalability</h1>\n<p id=\"c576\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Even with careful planning and organization, building scalable, performant React apps can be a challenge. Here are some tools and techniques that can help you optimize your app&rsquo;s performance and scalability:</p>\n<h2 id=\"11fa\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Server-side rendering</h2>\n<p id=\"b7e1\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Server-side rendering (SSR) can help improve the initial load time of your app by rendering the initial HTML on the server, rather than waiting for the client to download and parse the JavaScript. This can result in a faster, more responsive user experience, particularly on slower networks or devices.</p>\n<h2 id=\"c527\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Code splitting</h2>\n<p id=\"1e46\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Code splitting is a technique that involves breaking your code into smaller, more manageable chunks, and loading them only when they are needed. This can help reduce the initial load time of your app, and improve overall performance by reducing the amount of unnecessary code that needs to be downloaded and executed.</p>\n<h2 id=\"c9fd\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Memoization</h2>\n<p id=\"1c65\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Memoization is a technique for caching the results of expensive computations, and reusing them when the same input is provided again. In a React context, this can be particularly useful for optimizing the performance of complex or expensive components, by preventing unnecessary re-renders or updates.</p>\n<h2 id=\"bb7f\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Performance profiling</h2>\n<p id=\"93e0\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Performance profiling tools can help you identify performance bottlenecks in your app, and optimize them for better performance. These tools can provide detailed insights into how your app is performing, and help you identify areas where optimizations are needed.</p>\n<h2 id=\"65c6\" className=\"xe xf sm al xg mv xh mw mz na xi nb ne nf xj ng nj nk xk nl no np xl nq nt xm bp\" data-selectable-paragraph=\"\">Automated testing</h2>\n<p id=\"55ca\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">Finally, automated testing is an essential tool for ensuring that your React app is performing as expected. By creating automated tests that cover all of your app&rsquo;s functionality, you can catch potential issues early on, and ensure that your app is always performing at its best.</p>",
      "image": "/assets/img/post1-min.png",
      "author": "Asim Zaidi",
      "history": "Mar 21"
    },
    {
      "id": 2,
      "title": "Bye-bye useState & useEffect: Revolutionizing React Development!",
      "description": "Many developers continue to use the useState and useEffect hooks to update states, but I have not been fond of this approach. The issue is that it causes the component to mount, remount, and unmount simultaneously, leading to unexpected behavior. As a result, when logging something into the console, you may see the result repeated three times.\n\n",
      "content": "<p id=\"8519\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">Many developers continue to use the useState and useEffect hooks to update states, but I have not been fond of this approach. The issue is that it causes the component to mount, remount, and unmount simultaneously, leading to unexpected behavior. As a result, when logging something into the console, you may see the result repeated three times.</p>\n<h1 id=\"7a23\" className=\"xs xf sm al xg xt xu xv mz xw xx xy ne xz ya yb yc yd ye yf yg yh yi yj yk yl bp\" data-selectable-paragraph=\"\">Introducing the useLoaderData Hook:</h1>\n<p id=\"08e8\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">The&nbsp;<code className=\"cn ama amb amc amd b\">useLoaderData</code>&nbsp;hook is a custom hook in React that helps you load data into your component. It simplifies the process of fetching data from an API or performing any asynchronous operation.</p>\n<p id=\"2042\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\"><mark className=\"ait aiu ao\">When you use the&nbsp;</mark><mark className=\"ait aiu ao\"><code className=\"cn ama amb amc amd b\">useLoaderData</code></mark><mark className=\"ait aiu ao\">&nbsp;hook, you provide it with a function that returns a Promise. This Promise represents an asynchronous operation that will fetch the data you need. Once the Promise resolves, the data becomes available to your component.</mark></p>\n<p id=\"7741\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">The&nbsp;<code className=\"cn ama amb amc amd b\">useLoaderData</code>&nbsp;hook handles the loading state for you, so you don't need to manually track whether the data is still loading or if it has finished loading. It provides you with a convenient way to access the data and also handles any potential errors that might occur during the data loading process.</p>\n<p id=\"3bfe\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">By using the&nbsp;<code className=\"cn ama amb amc amd b\">useLoaderData</code>&nbsp;hook, you can keep your component code clean and organized, separating the data-loading logic from the rest of your component's responsibilities. It allows you to easily fetch and manage data in a more beginner-friendly way.</p>\n<h1 id=\"78a1\" className=\"xs xf sm al xg xt xu xv mz xw xx xy ne xz ya yb yc yd ye yf yg yh yi yj yk yl bp\" data-selectable-paragraph=\"\">Why the useLoaderHook?</h1>\n<p id=\"77ef\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">The useLoaderHook from react-router helps achieve the same functionality with minimal effort. These are some examples of why you should use it.</p>\n<ul className=\"\">\n<li id=\"a7d0\" className=\"wk wl sm nv b wm wn wo wp wq wr ws wt yq wu wv ww yr wx wy wz ys xa xb xc xd ame amf amg bp\" data-selectable-paragraph=\"\"><strong className=\"nv gl\">Loading state management</strong>: Loaders handle the loading state for you, providing a clear indication of when data is being fetched. This helps you manage loading spinners, progress indicators, or any other UI elements related to data loading.</li>\n<li id=\"48cf\" className=\"wk wl sm nv b wm amh wo wp wq ami ws wt yq amj wv ww yr amk wy wz ys aml xb xc xd ame amf amg bp\" data-selectable-paragraph=\"\"><strong className=\"nv gl\">Error handling</strong>: Loaders often include error handling mechanisms, allowing you to handle and display errors that occur during the data loading process. They provide a standardized way to handle errors, making it easier to implement consistent error handling across your application.</li>\n<li id=\"6a32\" className=\"wk wl sm nv b wm amh wo wp wq ami ws wt yq amj wv ww yr amk wy wz ys aml xb xc xd ame amf amg bp\" data-selectable-paragraph=\"\"><strong className=\"nv gl\">Separation of concerns</strong>: Loaders allow you to separate the data loading logic from other aspects of your component. This promotes better code organization and maintainability, as you can focus on specific responsibilities without mixing them.</li>\n</ul>\n<p id=\"5f56\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">And lots more.</p>\n<h1 id=\"f43f\" className=\"xs xf sm al xg xt xu xv mz xw xx xy ne xz ya yb yc yd ye yf yg yh yi yj yk yl bp\" data-selectable-paragraph=\"\">Let&rsquo;s see How This Works.</h1>\n<p id=\"597f\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">It&rsquo;s assumed that you have a good knowledge of how react-router 6 works. If you don&rsquo;t, Feel free to check out the docs&nbsp;<a className=\"ay hk\" href=\"https://reactrouter.com/en/main\" target=\"_blank\" rel=\"noopener ugc nofollow\">here</a></p>\n<p id=\"d841\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">Firstly, we have to set up the routing system in our application to work with the Loader API. Before now, we have been using the BrowserRouter setup to handle the various routes for our application.<br>Let&rsquo;s spend a little time talking about this.</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"dc75\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-keyword\">import</span> { <span className=\"hljs-title.class\">BrowserRouter</span>, <span className=\"hljs-title.class\">Routes</span>, <span className=\"hljs-title.class\">Route</span>, <span className=\"hljs-title.class\">Outlet</span> } <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"react-router-dom\"</span><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">HomeComponent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./home\"</span><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">AboutCompoent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./about\"</span><br><span className=\"hljs-keyword\">function</span> <span className=\"hljs-title.function\">App</span> () {<br>    &lt;BrowserRouter&gt;<br>        &lt;Routes&gt;<br>            &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; } /&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent/&gt; } /&gt;<br>            &lt;/Route&gt;<br>        &lt;/Routes&gt;<br>    &lt;/BrowserRouter&gt;<br>};<br><span className=\"hljs-keyword\">export</span> <span className=\"hljs-keyword\">default</span> <span className=\"hljs-title.class\">App</span>;</span></pre>\n<p id=\"68c5\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">Here, we have set up a routing system traditionally using those imports from react-router.<br>Think for a second about what&rsquo;s happening.</p>\n<p id=\"e22d\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">Well. The BrowserRouter from react-router creates an array of object from the&nbsp;<code className=\"cn ama amb amc amd b\">Routes</code>&nbsp;children. The snippet below provides a clear illustration of how this is working.</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"17e2\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-title.class\">BrowserRouter</span>([<br>{<br>    <span className=\"hljs-attr\">path</span>: <span className=\"hljs-string\">'/'</span>,<br>    <span className=\"hljs-attr\">element</span>: &lt;HomeComponent /&gt;,<br>    <span className=\"hljs-attr\">children</span>: []<br>},<br>{<br>    <span className=\"hljs-attr\">path</span>: <span className=\"hljs-string\">'/about'</span>,<br>    <span className=\"hljs-attr\">element</span>: &lt;AboutComponent/&gt;,<br>    <span className=\"hljs-attr\">children</span>: []<br>}<br>])</span></pre>\n<p id=\"b7c9\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">If they were to be a nested route, then it appends the children&rsquo;s route to the children&rsquo;s key in the parent route.<br>Yes, That&rsquo;s how it keeps being&nbsp;<strong className=\"nv gl\">recursive.</strong></p>\n<p id=\"d195\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">However, this method can&rsquo;t be used to use the&nbsp;<strong className=\"nv gl\">loaderData</strong>&nbsp;hook. We have to do a bit of refactoring. Don&rsquo;t panic, It&rsquo;s a bit similar to this. I highly recommend you check out the react-router docs for more information.</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"b7b0\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-keyword\">import</span> { <br>createBrowserRouter,<br>createRoutesFromElements,<br><span className=\"hljs-title.class\">RouterProvider</span>,<br><span className=\"hljs-title.class\">Route</span>, <br><span className=\"hljs-title.class\">Outlet</span><br> } <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"react-router-dom\"</span><br><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">HomeComponent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./home\"</span><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">AboutComponent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./about\"</span><br><br><span className=\"hljs-keyword\">function</span> <span className=\"hljs-title.function\">App</span>() {<br>    <span className=\"hljs-keyword\">const</span> browserRoutes = <span className=\"hljs-title.function\">createBrowserRouter</span>(<span className=\"hljs-title.function\">createRoutesFromElements</span>(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; } /&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     <span className=\"hljs-keyword\">return</span> (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</span></pre>\n<p id=\"d40f\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">I have imported&nbsp;<code className=\"cn ama amb amc amd b\">createBrowserRouter</code>,&nbsp;<code className=\"cn ama amb amc amd b\">createRoutesFromElement</code>,&nbsp;<code className=\"cn ama amb amc amd b\">RouterProvider</code>.<br>Then, initialize a variable named&nbsp;<code className=\"cn ama amb amc amd b\">browserRoutes</code>&nbsp;to serve as that object that should be rendered. Noticed that I called the&nbsp;<code className=\"cn ama amb amc amd b\">createRoutesFromElements</code>&nbsp;function inside of the&nbsp;<code className=\"cn ama amb amc amd b\">createBrowserRouter</code>&nbsp;function. This was because I want to parse or convert the Routes to an object and the&nbsp;<code className=\"cn ama amb amc amd b\">createRoutesFromElements</code>&nbsp;as the name implies can help me do that. Then lastly the&nbsp;<code className=\"cn ama amb amc amd b\">RouterProvider</code>&nbsp;was returned with the value of the new&nbsp;<code className=\"cn ama amb amc amd b\">browserRouter</code>. Let's take a look at what we would have done without using the createRoutesFromElements function.</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"614b\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-title.function\">createBrowserRouter</span>([<br>{<br>    <span className=\"hljs-attr\">path</span>: <span className=\"hljs-string\">'/'</span>,<br>    <span className=\"hljs-attr\">element</span>: &lt;HomeComponent /&gt;,<br>    <span className=\"hljs-attr\">children</span>: []<br>},<br>{<br>    <span className=\"hljs-attr\">path</span>: <span className=\"hljs-string\">'/about'</span>,<br>    <span className=\"hljs-attr\">element</span>: &lt;AboutComponent/&gt;,<br>    <span className=\"hljs-attr\">children</span>: []<br>}])</span></pre>\n<p id=\"d990\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">I am not a big fan of this as your route can even go nested and at some point, this becomes confusing. You should keep things very simple.</p>\n<h1 id=\"49c2\" className=\"xs xf sm al xg xt xu xv mz xw xx xy ne xz ya yb yc yd ye yf yg yh yi yj yk yl bp\" data-selectable-paragraph=\"\">Exploring the Loader functions:</h1>\n<p id=\"24b8\" className=\"pw-post-body-paragraph wk wl sm nv b wm xn wo wp wq xo ws wt nf xp wv ww nk xq wy wz np xr xb xc xd kr bp\" data-selectable-paragraph=\"\">As we now have a bit of an understanding of how we can set up our application to use the Loader API, let&rsquo;s see how we can use the API.</p>\n<p id=\"c806\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">Say you intend to fetch data from an endpoint andto be displayed on the&nbsp;<code className=\"cn ama amb amc amd b\">homeComponent</code>. What most developers would do is: initialize a state and update the state in the&nbsp;<strong className=\"nv gl\">useEffect&nbsp;</strong>hook. The snippet below provides a clear illustration of what I am talking about.</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"d8ed\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-keyword\">import</span> { useState } <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">'react'</span><br><br><span className=\"hljs-keyword\">const</span> <span className=\"hljs-title.function\">HomeComponent</span> = () =&gt; {<br>    <span className=\"hljs-keyword\">const</span> [data, setData] = <span className=\"hljs-title.function\">useState</span>([]);<br>    <br>    <span className=\"hljs-title.function\">useEffect</span>(<span className=\"hljs-keyword\">async</span> () =&gt; {<br>        <span className=\"hljs-keyword\">const</span> request = <span className=\"hljs-keyword\">await</span> <span className=\"hljs-title.function\">fetch</span>(<span className=\"hljs-string\">'http://localhost:3004/file'</span>);<br>         <span className=\"hljs-keyword\">if</span>(!request.<span className=\"hljs-property\">ok</span>) <span className=\"hljs-keyword\">throw</span> <span className=\"hljs-keyword\">new</span> <span className=\"hljs-title.class\">Error</span>(<span className=\"hljs-string\">'Failed to fetch data'</span>)<br>        <span className=\"hljs-keyword\">const</span> item= <span className=\"hljs-keyword\">await</span> request.<span className=\"hljs-title.function\">json</span>()<br>        <span className=\"hljs-title.function\">setData</span>(item)  <br>    }, [])<br><br>    <span className=\"hljs-keyword\">return</span> (<br>        &lt;section&gt;<br>            { data.length &gt; 0 ? data.map((foundData) =&gt; (<br>                    &lt;div key={foundData.id}&gt;<br>                        &lt;strong&gt;{foundData.name}&lt;/strong&gt;<br>                     &lt;/div&gt;<br>                 )) : &lt;p&gt;Data currently unavailable&lt;/p&gt;}<br>        &lt;/section&gt;<br>    )<br>}<br><span className=\"hljs-keyword\">export</span> <span className=\"hljs-keyword\">default</span> <span className=\"hljs-title.class\">HomeComponent</span></span></pre>\n<p id=\"44b1\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">This is a tonne of lines as we might want to simplify this a bit and maybe reuse the same function.</p>\n<p id=\"069b\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">To use&nbsp;<strong className=\"nv gl\">Loaders</strong>, you have to define a&nbsp;<strong className=\"nv gl\">loader&nbsp;</strong>function. Loader functions are like&nbsp;<strong className=\"nv gl\">Custom Hooks</strong>.<br>Besides, the naming convention of the function doesn&rsquo;t matter as you can call it anything. In the code snippet below, I will create a basic loader function that fetches data from an API like I showed in the snipppet above</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"d138\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-keyword\">export</span> <span className=\"hljs-keyword\">async</span> <span className=\"hljs-keyword\">function</span> <span className=\"hljs-title.function\">LoaderFunction</span> () {<br>    <span className=\"hljs-keyword\">const</span> request = <span className=\"hljs-keyword\">await</span> <span className=\"hljs-title.function\">fetch</span>(<span className=\"hljs-string\">'http://localhost:3004/file'</span>);<br>    <span className=\"hljs-keyword\">if</span> (!request.<span className=\"hljs-property\">ok</span>) <span className=\"hljs-keyword\">throw</span> <span className=\"hljs-keyword\">new</span> <span className=\"hljs-title.class\">Error</span> (<span className=\"hljs-string\">'Failed to fetch item'</span>)<br>    <span className=\"hljs-keyword\">const</span> item = <span className=\"hljs-keyword\">await</span>  response.<span className=\"hljs-title.function\">json</span>();<br>    <span className=\"hljs-keyword\">return</span> item;<br>};</span></pre>\n<p id=\"f162\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">Now, we have to import the loader function to component where our routes are being handled. After setting up your route system using the&nbsp;<code className=\"cn ama amb amc amd b\">createBrowserRouter</code>&nbsp;and&nbsp;<code className=\"cn ama amb amc amd b\">createRouteFromElements</code>&nbsp;you should have access to a prop called&nbsp;<code className=\"cn ama amb amc amd b\">loader</code>. There you should pass in the&nbsp;<code className=\"cn ama amb amc amd b\">LoaderFunction</code>&nbsp;you created as the value.<br>In the code snippet below provides a clear illustration of this.</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"e80e\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-keyword\">import</span> { <br>createBrowserRouter,<br>createRoutesFromElements,<br><span className=\"hljs-title.class\">RouterProvider</span>,<br><span className=\"hljs-title.class\">Route</span>, <br><span className=\"hljs-title.class\">Outlet</span><br> } <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"react-router-dom\"</span><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">HomeComponent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./home\"</span><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">AboutComponent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./about\"</span><br><span className=\"hljs-keyword\">import</span> { <span className=\"hljs-title.class\">LoaderFunction</span> <span className=\"hljs-keyword\">as</span> <span className=\"hljs-title.class\">HomeLoader</span>} <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./loader\"</span><br><br><span className=\"hljs-keyword\">function</span> <span className=\"hljs-title.function\">App</span>() {<br>    <span className=\"hljs-keyword\">const</span> browserRoutes = <span className=\"hljs-title.function\">createBrowserRouter</span>(<span className=\"hljs-title.function\">createRoutesFromElements</span>(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; }<br>                     loader={HomeLoader}/&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     <span className=\"hljs-keyword\">return</span> (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</span></pre>\n<p id=\"4196\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">After that, We can access the data returned by the loader function using the&nbsp;<strong className=\"nv gl\">useLoaderData&nbsp;</strong>Hook from react-router in the HomeComponent.<br>The code snippet below best explains what just read.</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"f51b\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-keyword\">import</span> { useLoaderData } <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"react-router-dom\"</span><br><br><span className=\"hljs-keyword\">const</span> <span className=\"hljs-title.function\">HomeComponent</span> = () =&gt; {<br>    <span className=\"hljs-keyword\">const</span> data = <span className=\"hljs-title.function\">useLoaderData</span>();<br><br>    <span className=\"hljs-keyword\">return</span> (<br>        &lt;section&gt;<br>            {data.map((foundData) =&gt; (<br>                    &lt;div key={foundData.id}&gt;<br>                         &lt;strong&gt;{foundData.name}&lt;/strong&gt; <br>                    &lt;/div&gt; <br>            ))}<br>        &lt;/section&gt;<br>    )<br>}<br><span className=\"hljs-keyword\">export</span> <span className=\"hljs-keyword\">default</span> <span className=\"hljs-title.class\">HomeComponent</span></span></pre>\n<p id=\"5d76\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\"><strong className=\"nv gl\">Wow! \uD83D\uDE32..</strong><br>Now see how we have just cleaned up the HomeComponent :)<br>Noticed we got rid of the guard clause that checks if the data is null.<br>This is because react-router makes it load the data as soon as the url/path is active. So, it Makes the necessary requests even before the&nbsp;<strong className=\"nv gl\">Component is Mounted</strong>. Yes!</p>\n<p id=\"8173\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">We are only making provisions for the happy path. What if we pass a non-existing endpoint? If that&rsquo;s the case, don&rsquo;t panic as react-router also allow us to pass components to another prop called&nbsp;<code className=\"cn ama amb amc amd b\">errorElement</code>&nbsp;.<br>This is specifically for Errors just as we use&nbsp;<code className=\"cn ama amb amc amd b\">ErrorBoundaries</code>. Let's see how this works in the snippet below</p>\n<pre className=\"aiy aiz aja ajb ajc amm amd amn rk amo amp amq\"><span id=\"b078\" className=\"amr xf sm amd b bl ams amt s amu amv\" data-selectable-paragraph=\"\"><span className=\"hljs-keyword\">import</span> { <br>createBrowserRouter,<br>createRoutesFromElements,<br><span className=\"hljs-title.class\">RouterProvider</span>,<br><span className=\"hljs-title.class\">Route</span>, <br><span className=\"hljs-title.class\">Outlet</span><br> } <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"react-router-dom\"</span><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">HomeComponent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./home\"</span><br><span className=\"hljs-keyword\">import</span> <span className=\"hljs-title.class\">AboutComponent</span> <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./about\"</span><br><span className=\"hljs-keyword\">import</span> { <span className=\"hljs-title.class\">LoaderFunction</span> <span className=\"hljs-keyword\">as</span> <span className=\"hljs-title.class\">HomeLoader</span>} <span className=\"hljs-keyword\">from</span> <span className=\"hljs-string\">\"./loader\"</span><br><br><span className=\"hljs-keyword\">function</span> <span className=\"hljs-title.function\">App</span>() {<br>    <span className=\"hljs-keyword\">const</span> browserRoutes = <span className=\"hljs-title.function\">createBrowserRouter</span>(<span className=\"hljs-title.function\">createRoutesFromElements</span>(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; }<br>                    loader={HomeLoader} errorElement={&lt;h1&gt;An Error occured&lt;/h1&gt;}/&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     <span className=\"hljs-keyword\">return</span> (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</span></pre>\n<p id=\"46a7\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">I have just used a header tag to show the error. It is advisable you use a Component so that you can also get access to the&nbsp;<code className=\"cn ama amb amc amd b\">useRouteError</code>&nbsp;Hook. I'd show how to use the useRouteError Hook in one of my upcoming blog posts. If you're keen to learn about it, Kindly use this&nbsp;<a className=\"ay hk\" href=\"https://reactrouter.com/en/main/hooks/use-route-error\" target=\"_blank\" rel=\"noopener ugc nofollow\">link</a>.<br>Since it pre-fetches the data before mounting the component, the loading state becomes irrelevant as it might either get the data or return the error message the you pass as a value to the&nbsp;<strong className=\"nv gl\">errorElement&nbsp;</strong>prop.</p>\n<p id=\"4b7b\" className=\"pw-post-body-paragraph wk wl sm nv b wm wn wo wp wq wr ws wt nf wu wv ww nk wx wy wz np xa xb xc xd kr bp\" data-selectable-paragraph=\"\">That&rsquo;s all of the basics you need to know about making requests using the&nbsp;<strong className=\"nv gl\">Data Layer API</strong></p>",
      "image": "/assets/img/post2-min.jpg",
      "author": "Emmanuel Odii",
      "history": "Mar 16"
    },
    {
      "id": 3,
      "title": "Avoiding Dark Patterns in Web Design",
      "description": "The web seems full of deceptive design patterns that use psychology to manipulate people into handing over personal information (also known as “dark patterns”), buy things they do not want or need and become addicted to an endless stream of ad-supported clickbait.",
      "content": "<p>Do you ever feel like the web has turned into&nbsp;<a href=\"https://en.wikipedia.org/wiki/Mos_Eisley\">Mos Eisley</a>, &ldquo;<em>a wretched hive of scum and villainy</em>&rdquo;? A place where anything goes as companies attempt to persuade us to click, download or buy.</p>\n<p>The web seems full of deceptive design patterns that use psychology to manipulate people into handing over personal information (also known as &ldquo;dark patterns&rdquo;), buy things they do not want or need and become addicted to an endless stream of ad-supported clickbait.</p>\n<p>As digital professionals, we often find ourselves caught in the middle of this battle for the integrity of the web, yet our pleas of &ldquo;<em>will no one think of users</em>&rdquo; fall on deaf ears.</p>\n<p>In this article, I want to help you make the case against deceptive design and provide you with more ethical alternatives that are ultimately better for everybody.</p>\n<p>But before we get to that, let&rsquo;s start by defining what we mean by deceptive design.</p>\n<h2 id=\"what-are-dark-patterns-and-deceptive-design\">What Are Dark Patterns and Deceptive Design?</h2>\n<p>In my book&nbsp;<a href=\"https://www.smashingmagazine.com/printed-books/click/\">Click</a>, I define deceptive design (also often known as dark patterns) as: &ldquo;<em>User interface elements that have been carefully crafted to trick users into doing things they might not otherwise do, often using psychological manipulation</em>.&rdquo;</p>\n<p>The critical word there is &ldquo;<em>trick</em>.&rdquo; Not every annoying tactic used online is a deceptive design or a dark pattern. For example, popup overlays can be annoying, but they are not necessarily deceptive. Too often, dark patterns are used as a catchall for all annoying website characteristics, but when you go down that road, it becomes harder to argue against them.</p>\n<p className=\"pw-post-body-paragraph ld le fo lf b lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma fh bj\" data-selectable-paragraph=\"\">&nbsp;</p>\n<p>Popup modals may be annoying, but they are not always dark patterns or deceptive.</p>\n<p>So, for the sake of this article, I want to focus purely on manipulative tactics, not simply annoying ones.</p>\n<p>No doubt you have experienced these kinds of techniques yourself. For example, maybe you have been warned that only one item is in stock to illicit a fear of missing out if you do not act. Or perhaps you have had a company add something automatically to your cart in the hopes you do not notice. Then there is the classic technique of making it ridiculously complicated to unsubscribe, so we give up.&nbsp;<a href=\"https://www.deceptive.design/hall-of-shame/all\">The list goes on</a>.</p>\n<p className=\"pw-post-body-paragraph ld le fo lf b lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma fh bj\" data-selectable-paragraph=\"\">&nbsp;</p>\n<p>Etsy pressures people into making a quick purchase by emphasizing the item&rsquo;s scarcity.</p>\n<p>What all of these techniques share is that they use some element of human psychology against us. They rely on us being too afraid, too lazy, or too unobservant. That is what makes these techniques so unethical.</p>\n<h2 id=\"the-business-case-against-deceptive-design\">The Business Case Against Deceptive Design</h2>\n<p>Unfortunately, arguing that deceptive design is unethical is not enough.&nbsp;<a href=\"https://uxplanet.org/dark-pattern-design-its-downright-unethical-irresponsible-c2a3612a1640\">There are no shortage of articles online deriding dark patterns and deceptive design as unethical</a>. However, this approach is fundamentally flawed.</p>\n<p>I am in no way suggesting that deceptive design is not unethical. It absolutely is. I am merely saying it is not an adequate argument to stop people from using these techniques.</p>\n<p>The problem with the ethical argument is twofold. First, accusing a colleague of being unethical will likely anger them and make them defensive. Confrontation is rarely the way to achieve change.</p>\n<p>Second, when somebody is under pressure to meet a business target, they can justify almost any behavior to save their job. The truth is that most of those who use deceptive design do so because they know it will deliver the results they need, not because they like to screw other people over. Deceptive design is driven by desperation in most cases.</p>\n<p>With that in mind, there are two strategies for combatting deceptive design:</p>\n<ul>\n<li>to demonstrate that deceptive design causes more damage than it helps,</li>\n<li>to offer tangible alternatives.</li>\n</ul>\n<p>Let&rsquo;s begin with the argument that deceptive design is ultimately damaging. That begins with the reality that consumers are much savvier than many think.</p>\n<h3 id=\"consumers-are-cynical-savvy-and-spoilt-for-choice\">Consumers Are Cynical, Savvy, and Spoilt for Choice</h3>\n<p>Let&rsquo;s be clear; deceptive design works. As a result, many who adopt these practices presume people must be oblivious to them. If people are aware they are being manipulated, they reason, they would not act.</p>\n<p>In reality, it is not that simple. Time and again in usability testing, I see users complain about deceptive design practices. They moan about sites attempting to manipulate them and claim they simply ignore their attempts.</p>\n<p>In usability testing I have run on&nbsp;<a href=\"http://booking.com/\">booking.com</a>, users claimed to ignore the urgency the site creates. However, in reality, these do improve conversion.</p>\n<p>The problem is that users may think they ignore these techniques, but subconsciously they still influence behavior, meaning that ultimately deceptive design techniques do improve conversion.</p>\n<p>All of this means that dark patterns work, but they alienate people, and that is dangerous because consumers are spoilt for choice and tend to avoid companies that use them.</p>\n<p>Whether they switch supplier or not, they are still likely to complain, and those complaints have a real impact.</p>\n<h3 id=\"complaints-about-deceptive-design-have-a-real-impact\">Complaints about Deceptive Design Have a Real Impact</h3>\n<p>The internet has changed the dynamic between a company and a supplier. In the past, there was little a consumer could do when a company mistreated them. However, today a single customer can badly damage a brand.</p>\n<p>There are many stories of customers who caused such a fuss after having a bad experience that it turned into a major PR headache for the company involved, and when customers unite, it gets even worse.</p>\n<p className=\"pw-post-body-paragraph ld le fo lf b lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma fh bj\" data-selectable-paragraph=\"\">&nbsp;</p>\n<p>British Airways suffered a significant PR disaster because of a single disgruntled customer.</p>\n<p>Then, of course, there are also review sites that are major influencers in people&rsquo;s buying decisions.</p>\n<p>All of this is to say that if customers are unhappy because you tried to deceive them (even if you succeeded in doing so), it is likely to influence how your brand is seen in the marketplace.</p>\n<p>In fact, complaints about deceptive design techniques online are becoming so prevalent that increasingly&nbsp;<a href=\"https://boagworld.com/design/hotel-booking-sites-dark-patterns/\">governments are intervening</a>.</p>\n<p>From subscription services that make it hard to unsubscribe, to hotel booking sites that use deceptive techniques, government bodies are increasingly legislating against and pursuing those who use dark patterns.</p>\n<p>So even if a deceptive design technique works today, there is no guarantee it will continue to be so as governments intervene. And it is never wise to build your business practices on anything that may be untenable in the future.</p>\n<p>However, probably the biggest argument against deceptive design is nothing to do with the consumer and everything to do with the cost to the business.</p>\n<h3 id=\"deceptive-design-techniques-have-hidden-costs\">Deceptive Design Techniques Have Hidden Costs</h3>\n<p>Unhappy customers can often prove expensive. For example, if they have bought a physical product, there can be significant costs involved if they want a refund. Unfortunately, these costs are often hidden by poor internal communication.</p>\n<p>I once worked with a company that sold consumer electronics. Their biggest seller was a kettle that included a water filter to avoid limescale build-up that would damage the kettle and affect the taste.</p>\n<p>The kettle was the most popular item, but people weren&rsquo;t buying the filters (which needed replacing regularly) either because they didn&rsquo;t want to, didn&rsquo;t realize they had to or were buying &ldquo;non-brand&rdquo; versions for less.</p>\n<p>The company decided to automatically add filters to people&rsquo;s shopping carts when they selected the kettle without notifying them.&nbsp;<a href=\"https://darkpatternstipline.org/sightings/nordvpn-com/\">This is a classic dark pattern</a>&nbsp;and one that most people will miss unless they are paying attention.</p>\n<p>Sure enough, the number of filters sold shot up considerably, and the ecommerce team responsible for sales went away happy.</p>\n<p>However, elsewhere in the company, things were not so rosy.</p>\n<p>The customer service team saw a significant increase in complaints that needed to be handled, costing the company in person-hours and communication costs.</p>\n<p>Unsurprisingly many customers wanted refunds which cost the company postage, processing, and restocking.</p>\n<p>In short, the fallout almost eliminated the additional profits from this deceptive design technique. A fact that didn&rsquo;t come to light until I got involved and thought to ask the customer services and returns teams.</p>\n<p>So although dark patterns can appear profitable on the surface, they rarely are because of the internal costs they generate and the damage they do to brand identity. Damage that has to be offset by increased marketing spending.</p>\n<p>But telling your colleagues this isn&rsquo;t always going to be enough if you don&rsquo;t give them an alternative. If they are under pressure to hit a target, they may decide to ignore future PR problems or costs that will impact other teams.</p>\n<p>To really change their minds, you need to offer them an alternative.</p>\n<h2 id=\"4-alternatives-that-are-more-effective-than-dark-patterns\">4 Alternatives That Are More Effective Than Dark Patterns</h2>\n<p>Fortunately, not only are there alternatives, these often turn out to be more effective in the long-term and actually improve how people perceive your brand. In addition, they are techniques that, in many cases, benefit the customer and help you stand out from the competition.</p>\n<p>There are far too many of these techniques to get into here, so I want to focus on the four that, in my experience, have the biggest impact. For more on these techniques and to discover others, you may wish to watch my course on Frontend Masters entitled &ldquo;<a href=\"https://frontendmasters.com/courses/ux-design-principles/\">Web UX Design for High Converting Websites</a>.&rdquo;</p>\n<p>That said, let&rsquo;s dive in with one of the most significant ways to increase your conversion rate, reducing people&rsquo;s cognitive load.</p>\n<h3 id=\"reduce-peoples-cognitive-load\">Reduce People&rsquo;s Cognitive Load</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Cognitive_load\">Cognitive load</a>&nbsp;refers to the fact that we can be easily overwhelmed and that when we are, it causes all kinds of issues.</p>\n<p>When people are overwhelmed, they fail to spot critical messaging, are significantly more likely to abandon a site, and often describe the experience as hard work or frustrating.</p>\n<p>However, even more interesting is that when people are overwhelmed, they become more distrustful and are less likely to act on a website.</p>\n<p>If we can keep people&rsquo;s cognitive load low and avoid them becoming overwhelmed, it will likely lead to higher conversion and improved customer perceptions. In other words, it has all the benefits of a dark pattern (higher conversion) without the downsides (negative brand perception).</p>\n<p>So how do we minimize people&rsquo;s cognitive load? Well, the answer lies simply in applying sound design principles.</p>\n<p>High cognitive load is caused by an inconsistent user interface, too much information vying for attention, and unexpected behavior. However, these problems can be addressed by simply sticking to design fundamentals.</p>\n<p>At the most basic level, it comes down to&nbsp;<a href=\"https://boagworld.com/design/cognitive-load/\">removing clutter and being consistent</a>&nbsp;in how your user interface behaves.</p>\n<p className=\"pw-post-body-paragraph ld le fo lf b lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma fh bj\" data-selectable-paragraph=\"\">&nbsp;</p>\n<p>The fact that Amazon has avoided extensive redesigns, instead favoring incremental improvement, is that they know that significant changes increase cognitive load.</p>\n<p>However, one other element that can lead to a high cognitive load is a person&rsquo;s mood. The more negative the mood, the higher their cognitive load and the more mistakes they will make.</p>\n<p>Anything we can do to improve a user&rsquo;s mood will ultimately lead to lower cognitive load and improvements in conversion. This could be as small as adding humor to the user experience or as big as giving the user a free gift.</p>\n<p>Whatever technique you use, putting somebody in a good mood not only reduces cognitive load, it also builds trust.</p>\n<h3 id=\"establish-trust-and-overcome-cynicism\">Establish Trust and Overcome Cynicism</h3>\n<p>Trust is critical in encouraging people to act, whether you want them to give you their email address or spend money on your ecommerce site. If people don&rsquo;t trust you, they will not act.</p>\n<p>That is why,&nbsp;<a href=\"https://business.adobe.com/uk/blog/perspectives/7-in-10-customers-will-buy-more-from-brands-they-trust-uk\">according to research by Adobe</a>, 71% of customers say they are more likely to purchase from a company they trust, and 61% say they are more likely to recommend that company to others.</p>\n<p>Unfortunately, people are becoming less trustful primarily because of all the manipulative techniques companies use.</p>\n<p>Fortunately, we can do a lot to build trust, and by far, the biggest tool in our arsenal is social proof.</p>\n<p>Knowing whether to trust a website or not is hard to work out. So instead, people tend to rely on the opinions of others, even if they do not know that person.</p>\n<p>Social proof provides those independent perspectives through testimonials, ratings, reviews, and expert opinions. In other words, instead of you saying how great you are, you let others do it on your behalf.</p>\n<p>The problem is that people are becoming increasingly cynical about social proof. They don&rsquo;t trust ratings, reviews, or testimonials as genuine. They are even suspicious of awards and certifications when they come from organizations they do not know.</p>\n<p>We need to back up our social proof with evidence to combat this problem. Typically this will involve linking to an independent source.</p>\n<p>Websites are increasingly using third-party review sites like&nbsp;<a href=\"https://uk.trustpilot.com/\">Trust Pilot</a>&nbsp;or linking back to testimonials shared on social media. This helps people reassure themselves that these sources are trustworthy.</p>\n<p className=\"pw-post-body-paragraph ld le fo lf b lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma fh bj\" data-selectable-paragraph=\"\">&nbsp;</p>\n<p>Featuring independent reviews from a source like Trust Pilot adds credibility and builds trust.</p>\n<p>Another alternative is to record video testimonials of people over Zoom, allowing users to see that the testimonial is from a real person and not made up. The quality doesn&rsquo;t need to be great, as highly polished professional videos actually make it appear less trustworthy.</p>\n<p>Not that users rely solely on the opinions of others before deciding to act. Users will need answers to the majority of their questions to reassure themselves that any concerns they have are unjustified.</p>\n<h3 id=\"address-peoples-objections-and-questions\">Address People&rsquo;s Objections and Questions</h3>\n<p>I am amazed at how many websites are created from the wrong premise.</p>\n<p>Organizations start by asking themselves what they would like to tell their audience rather than asking what their audience wants to know. The result is a website full of self-congratulatory copy that does nothing to answer the customers' questions.</p>\n<p>If you want people to act on your website, you must answer any questions they have and address any concerns they harbor.</p>\n<p>I am currently working with a company that sells network monitoring software. Their website does not mention the price because it is complicated to work out as it depends on the number of devices on the network.</p>\n<p>Unfortunately, price is the number one thing the audience wants to know. To make matters worse, because this question is not addressed on the site, users assume it must be expensive and, therefore, out of their price range.</p>\n<p>Failing to answer the question is frustrating for users and leads them to false presumptions.</p>\n<p>However, worse than failing to answer the questions of your audience is a failure to address their objections.</p>\n<p>Whether a user worries about how you will use their data or about your organization&rsquo;s ability to deliver, they will not act without being reassured.</p>\n<p>Despite this, many organizations choose not to address potential objections for fear of planting the idea in the mind of consumers.</p>\n<p>Although there is some validity in this, you can address an objection without overly raising the objection. For example, the Mcdonald&rsquo;s website mentions that they only use chicken breast. They don&rsquo;t say that many customers have concerns about what goes into a chicken nugget.</p>\n<p className=\"pw-post-body-paragraph ld le fo lf b lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma fh bj\" data-selectable-paragraph=\"\">&nbsp;</p>\n<p>McDonalds recognise that consumers have concerns about food quality and so they address this on their website.</p>\n<p>So instead of falling back on some deceptive design gimmick, you will see far more success simply addressing the user&rsquo;s questions and objections.</p>\n<p>In my 27 years working in conversion optimization, simply answering user questions has consistently brought exceptional results. However, there is one last technique that might even trump that.</p>\n<h3 id=\"save-people-time\">Save People Time</h3>\n<p>According to&nbsp;<a href=\"https://www.microsoft.com/en-us/us-partner-blog/2021/11/15/you-have-eight-seconds-differentiate-your-business-through-the-art-of-storytelling/\">research by Microsoft, we have approximately 8 seconds</a>&nbsp;to encourage users to stay on a webpage. That is because, in most cases, users' most precious commodity is not money but time.</p>\n<p>With so many options and so little time, consumers are brutal in how quickly they will dismiss a website.</p>\n<p>If a page does not load fast enough or they cannot instantly find what they are looking for, they will abandon a website. So, if you want to improve your conversion rate, you must save people time at all costs.</p>\n<p>A big part of this is simply making your website easy to use. However, probably the most overlooked component is site performance.</p>\n<p><a href=\"https://www.aberdeen.com/\">The Aberdeen Group</a>&nbsp;discovered a 1-second delay resulted in 11% fewer page views, a 16% decrease in customer satisfaction, and a 7% loss in conversions.</p>\n<p>Put another way, if you could shave 1 second off of load time, you could see a 7% increase in sales as well as happier customers. No dark pattern could compete with that.</p>\n<p>Unfortunately, many of the techniques we use to try to improve conversion actually have a detrimental impact on performance.</p>\n<p>For example, designers favor custom fonts, video backgrounds, Javascript driven animation, and other &ldquo;<a href=\"https://ui-patterns.com/patterns/delighters\">design delighters</a>&rdquo; in the hopes of encouraging users to act.</p>\n<p>Although these things have their place, they cannot come at the cost of performance. Performance is too powerful a tool for increasing conversion (not to mention search engine ranking) to ignore.</p>\n<h2 id=\"happier-customers-more-sales\">Happier Customers, More Sales</h2>\n<p>The advantage of the techniques I have outlined when compared to deceptive design is that they give you higher conversion while also leading to happier customers.</p>\n<p>While dark patterns anger and frustrate users, these techniques improve the experience, leading to more word-of-mouth recommendations. Done right, this can lead to a self-sustaining cycle where, unlike dark patterns, you are not reliant on significant advertising spending to drive new customers.</p>\n<p>So next time your marketing or ecommerce stakeholder wants to start using dark patterns, hopefully you will be better equipped to point out their flaws and offer them some alternatives.</p>",
      "image": "/assets/img/post3-min.jpg",
      "author": "Paul Boag",
      "history": "Apr 24"
    },
    {
      "id": 4,
      "title": "5 Tips For Writing A Great Technical Resume",
      "description": "How often have you scrambled to assemble a resume, only never to hear back from the company you applied to? You’re not alone. Often your resume competes against hundreds (or even thousands!) of other resumes. So…how do you get noticed?",
      "content": "<p>How often have you scrambled to assemble a resume, only never to hear back from the company you applied to? You&rsquo;re not alone. Often your resume competes against hundreds (or even thousands!) of other resumes. So&hellip;how do you get noticed?</p>\n<p>A resume isn&rsquo;t something most people regularly update (even though we probably should). When you suddenly apply for jobs, throwing one together at the last minute can be overwhelming.</p>\n<p>First and foremost, your resume is a representation of you. Just like you&rsquo;re on your &ldquo;best behavior&rdquo; for a job interview, your resume should present the best possible version of yourself.</p>\n<p>On average, recruiters spend about&nbsp;<a href=\"https://www.hrdive.com/news/eye-tracking-study-shows-recruiters-look-at-resumes-for-7-seconds/541582/\">seven seconds</a>&nbsp;reviewing your resume, so it&rsquo;s imperative to put the most relevant information at the forefront and have a visually appealing presentation.</p>\n<p>Let&rsquo;s look at some of the most common resume mistakes and how to fix them, which will ensure you present the best possible version of yourself to recruiters and land a job interview.</p>\n<h2 id=\"tip-1-your-contact-information-should-be-easy-to-locate\">Tip #1. Your Contact Information Should Be Easy To Locate</h2>\n<p>Recruiters must be able to contact you. If your contact information is listed at the bottom of your resume, it will be a hassle for them to find it, and likely, they&rsquo;ll move on to the next candidate.</p>\n<p>Include your full name, phone number, and email address; your physical address is only necessary if you apply for an international role. Additionally, if you are applying for an international position, include the country code with your phone number.</p>\n<p>You may also include links to your personal website, Twitter, blog, or LinkedIn page if they&rsquo;re focused on your professional experiences.</p>\n<p>Two layouts that work well include the two-column layout, where the left sidebar includes your contact information and relevant skills. In contrast, the main column includes your work experience and education.</p>\n<p>&nbsp;</p>\n<p>The second layout that works well is the one-column layout, where your contact information is at the top, followed by the content.</p>\n<p>&nbsp;</p>\n<p>Whichever layout you choose, make sure your contact information is up-to-date and easy to find.</p>\n<h2 id=\"tip-2-focus-your-work-experience-on-your-direct-impact\">Tip #2. Focus Your Work Experience On Your Direct Impact</h2>\n<p>One of the biggest &ldquo;mistakes&rdquo; with resumes is not listing your direct impact on a product or team. Let&rsquo;s take a look at an example. Can you see the difference between the following two resumes?</p>\n<p>&nbsp;</p>\n<p>Looking at these two examples, it&rsquo;s clear that resume two has provided more detailed information. It has included concise bullet points and leveraged data where applicable (i.e., &ldquo;&hellip;which reduced page load time from 2.3 seconds to 0.5 seconds&rdquo;).</p>\n<p>Resume two also clearly explains the &ldquo;so what&rdquo; recruiters are looking for when reviewing your resume. You should clearly define your direct impact on a project or team. These are called &ldquo;impact statements.&rdquo;</p>\n<p>When writing your impact statements, you should use action verbs. Here is a list of helpful action verbs you can use when writing your impact statements:</p>\n<p>&nbsp;</p>\n<p>Using impact statements with action verbs and data will drastically improve your ability to catch a recruiter&rsquo;s eye.</p>\n<p>Your impact statements should always be written in first-person, but omit the subject &ldquo;I.&rdquo; So instead of writing: &ldquo;I aided two new team members to submit a pull request,&rdquo; skip the &ldquo;I.&rdquo; The statement should read: &ldquo;Aided two new team members to submit a pull request.&rdquo;</p>\n<p>Here are a few examples of effective impact statements. You&rsquo;ll notice a few critical components across each of the examples.</p>\n<ul>\n<li>Each statement begins with an action verb</li>\n<li>Each statement answers the question &ldquo;so what&rdquo; (impact statement)</li>\n<li>Where applicable, each impact statement includes a relevant data point</li>\n</ul>\n<p>&nbsp;</p>\n<p>It would be best if you aimed to have three to five impact statements for each work experience. Anything more and you run the risk of your most essential contributions getting lost in the resume; anything less and you may not effectively describe your contributions.</p>\n<h2 id=\"tip-3-ensure-consistent-formatting\">Tip #3. Ensure Consistent Formatting</h2>\n<p>You may think that inconsistent resume formatting isn&rsquo;t an issue, but minor inconsistencies add up. In the book Atomic Habits by James Clear, the author describes the impact that small changes have on the trajectory of an airplane.</p>\n<p>&ldquo;Imagine a plane taking off from Los Angeles and directed to New York. If the pilot decided to adjust the course by 3.5 degrees to the south previous to departure, the plane would slightly move few centimeters, and no one would probably notice. However, throughout the journey, the impact of that little change would be tremendous&ndash;&ndash;to the point that the plane would land in Washington DC, instead of New York.&rdquo;</p>\n<ul>\n<li><a href=\"https://jamesclear.com/atomic-habits\">Atomic Habits by James Clear</a></li>\n</ul>\n<p>If our resume has six formatting mistakes, it may seem like a small amount when taken at a granular level, but when we view the resume as a whole, they add up. Let&rsquo;s illustrate this with an example.</p>\n<p>Given the following two resumes, which looks more visually appealing?</p>\n<p>&nbsp;</p>\n<p>It takes little time to determine which resume looks more visually appealing. Why is that? There&rsquo;s nothing in resume two that could be better, but several issues make it feel less put together.</p>\n<p>The formatting issues with resume two include the following:</p>\n<ul>\n<li>An extra space before the email address</li>\n<li>The email address is written in a different font family</li>\n<li>Company three&rsquo;s impact statements are indented</li>\n<li>The space between company one and company two is 38px, while the space between company two and company three is 47px</li>\n<li>Company two&rsquo;s title is a smaller font size</li>\n</ul>\n<p>&nbsp;</p>\n<p>None of these formatting inconsistencies in isolation is a massive issue, but combined can indicate that you&rsquo;re not detail-oriented.</p>\n<h3 id=\"export-your-resume-in-pdf-format\">Export Your Resume In PDF Format</h3>\n<p>When it&rsquo;s time to export your resume, you should export it as a PDF. While .doc or .docx are also common resume formats, they don&rsquo;t preserve formatting. As a result the layout can be skewed when viewed on someone else&rsquo;s computer. A PDF format, in contrast, preserves formatting.</p>\n<h2 id=\"tip-4-listing-unfamiliar-tools--languages\">Tip #4. Listing Unfamiliar Tools &amp; Languages</h2>\n<p>When I created my first resume, I listed every tool and language I encountered. This led to awkward interviews when I was asked questions about jQuery, and I&rsquo;d only read about it in a college textbook.</p>\n<p>If you are not comfortable completing a code challenge in a language, you should omit it from your resume&rsquo;s language/technology section.</p>\n<p>If you&rsquo;ve worked with a language or technology in the past, you may indicate that within a specific work experience. For example, if you add the impact statement &ldquo;refactored legacy Dojo code into React components,&rdquo; the recruiter knows you have some experience with Dojo but aren&rsquo;t necessarily a Dojo expert. In contrast, listing Dojo as one of your language competencies indicates you&rsquo;re comfortable coding in the framework.</p>\n<p>Make sure to only list technologies underneath your key skills that you&rsquo;d be comfortable answering questions about in a technical interview.</p>\n<h2 id=\"tip-5-keep-your-resume-to-one-page-two-page-maximum\">Tip #5. Keep Your Resume To One Page (Two Page Maximum)</h2>\n<p>One of the biggest mistakes I see when reviewing resumes is that they need to be shorter. A resume should be one page if you have less than ten years of experience in the relevant industry and a maximum of two pages if you have ten or more years of experience in the relevant industry.</p>\n<p>You might think, &ldquo;I thought a resume was supposed to encompass everything you&rsquo;ve ever achieved professionally and academically?&rdquo; A resume should only highlight your professional and academic accomplishments in reverse-chronological order (most recent experiences first).</p>\n<p>If you want to create a multi-page, chronological document of your accomplishments, that is a CV or a curriculum vitae. A CV is all-encompassing and lists experiences and achievements chronologically (most recent experiences at the end). You can think of a CV like a novel you read from beginning to end.</p>\n<p>You should check the preferred document (resume vs. CV) when applying for a job. If the posting doesn&rsquo;t say, you should look at the most widely accepted document for that geographical location. For example, it&rsquo;s more common in the U.S. to submit a resume when applying for a job, whereas many European countries prefer a CV.</p>\n<h2 id=\"go-create-your-stand-out-resume\">Go Create Your Stand-Out Resume</h2>\n<p>Implementing these five tips will ensure your resume stands out among the applicant pool. Having friends and family read through your resume to catch any minor visual or grammatical errors is always a great idea. You can also use tools like&nbsp;<a href=\"https://www.grammarly.com/\">Grammarly</a>&nbsp;to check the tone and grammar of your resume.</p>\n<p>An up-to-date and comprehensive resume will ensure you put your best foot forward when applying for jobs. You&rsquo;ll land that interview in no time!</p>",
      "image": "/assets/img/post4-min.jpg",
      "author": "Emma Bostian",
      "history": "Mar 6"
    },
    {
      "id": 5,
      "title": "How to Choose the Right Mobile App Platform",
      "description": "If you start an app project today, there are some simple decisions, such as the cloud provider or the backend stack you will use. But the biggest challenge is to choose the right frontend app platform: PWA or native? Flutter or one native app per platform? What about React Native?",
      "content": "<p>If you start an app project today, there are some simple decisions, such as the cloud provider or the backend stack you will use. But the biggest challenge is to choose the right frontend app platform: PWA or native? Flutter or one native app per platform? What about React Native?</p>\n<p>You are looking for a platform with the less coding effort to give you the best results. While there is no single bullet, knowing the pros and cons of all the available solutions is essential.</p>\n<h2 id=\"consider-your-options\">Consider Your Options</h2>\n<p>It&rsquo;s essential to start by saying that most developers of the apps available in app stores are still developing the front of their apps using the official SDKs from each platform:</p>\n<ul>\n<li>Swift for iOS, iPadOS and macOS</li>\n<li>Kotlin (or Java) for Android</li>\n<li>.NET for Windows</li>\n</ul>\n<p>If you decide to go platform-specific (what it&rsquo;s typically known as native app development), you also have several options today for the user interface of your app:</p>\n<ul>\n<li>On the Apple side, you can choose the classic UI framework, UIKit, or the recent&nbsp;<em>SwiftUI</em>&nbsp;toolkit.</li>\n<li>On Android, you can choose between the classic UI library based on XML files or the recent&nbsp;<em>Jetpack Compose</em>&nbsp;framework.</li>\n</ul>\n<p>But using official SDKs means you need to create and maintain two or three separate apps, so that&rsquo;s why cross-platform solutions are growing fast, helping us generate app experiences for several operating systems using the same source code.</p>\n<p>According to the&nbsp;<a href=\"https://survey.stackoverflow.co/2022/#most-popular-technologies-language\">Stack Overflow 2022 Survey</a>, when talking about cross-platform app solutions, the most popular ones are&nbsp;<em>React Native</em>&nbsp;and&nbsp;<em>Flutter</em>, followed by&nbsp;<em>Xamarin</em>&nbsp;and many hybrid web-related technologies such as&nbsp;<em>Electron</em>, or&nbsp;<em>Cordova</em>.</p>\n<p>Regarding the web platform, you can ship one app for multiple platforms and don&rsquo;t need to use any hybrid frameworks mentioned before. Today you can create&nbsp;<em>Progressive Web Apps (PWAs)</em>, a design pattern to develop installable offline-capable web apps for every operating system without packaging or using any SDK by default. These PWAs don&rsquo;t need an app store for distribution; once installed, they look primarily like any other app in the operating system.</p>\n<p>In this article, we will focus on the top 6 platforms that we think should be on your decision menu today:</p>\n<div className=\"responsive-table\" tabindex=\"0\" role=\"region\" aria-label=\"data table\">\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>From</th>\n<th>Targetting</th>\n<th>Primary Languages</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developer.android.com/\">Android SDK</a></td>\n<td>Google</td>\n<td>Android</td>\n<td>Kotlin, and Java</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.apple.com/ios/\">iOS SDK</a></td>\n<td>Apple</td>\n<td>iOS, iPadOS, macOS, watchOS, tvOS</td>\n<td>Swift and Objective-C</td>\n</tr>\n<tr>\n<td><a href=\"https://flutter.dev/\">Flutter</a></td>\n<td>Google</td>\n<td>Android, iOS, iPadOS, Windows, macOS, Linux, Fucshia, PWAs, any browser</td>\n<td>Dart</td>\n</tr>\n<tr>\n<td><a href=\"https://reactnative.dev/\">React Native</a></td>\n<td>Meta</td>\n<td>Android, iOS, iPadOS, Windows, macOS, PWAs, any browser</td>\n<td>JavaScript, JSX</td>\n</tr>\n<tr>\n<td><a href=\"https://web.dev/learn/pwa\">Progressive Web Apps</a></td>\n<td>W3C and browsers</td>\n<td>Android, iOS, iPadOS, Windows, macOS, ChromeOS, Linux, Oculus, any browser</td>\n<td>HTML,CSS,JavaScript,Web APIs</td>\n</tr>\n<tr>\n<td><a href=\"https://dotnet.microsoft.com/apps/xamarin\">Xamarin</a>&nbsp;/&nbsp;<a href=\"https://dotnet.microsoft.com/en-us/apps/maui\">.NET MAUI</a></td>\n<td>Microsoft</td>\n<td>Android, iOS, iPadOS, watchOS, tvOS, Tizen, Windows</td>\n<td>C# and .NET Core</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Consider that more options can also be helpful in specific conditions, such as&nbsp;<a href=\"https://cordova.apache.org/\">Cordova</a>,&nbsp;<a href=\"https://unity.com/\">Unity</a>,&nbsp;<a href=\"https://capacitorjs.com/\">Capacitor</a>,&nbsp;<a href=\"https://qt.io/\">Qt</a>, and&nbsp;<a href=\"https://nativescript.org/\">NativeScript</a>.</p>\n<p><strong>Note:</strong>&nbsp;An special mention to&nbsp;<a href=\"https://kotlinlang.org/lp/mobile/\"><em>Kotlin Multiplatform Mobile</em></a>: it&rsquo;s a framework to write code for apps in Kotlin and use it for Android and iOS applications. However, it&rsquo;s not a complete app development framework, so we don&rsquo;t consider it here. It&rsquo;s useful for different layers of your app. However, the view layer and the final packaging still need to be developed using other platforms, such as SwifUI and Jetpack Compose with Kotlin.</p>\n<h2 id=\"figure-out-what-kind-of-platform-you-need\">Figure out What Kind of Platform You Need</h2>\n<p>When choosing, the first thing to understand is that not every project is the same, so you should not make a decision for all your apps. You may want to create</p>\n<ol>\n<li>An end-user app that mostly consumes and renders data from web services.</li>\n<li>An immersive game or a VR/AR experience.</li>\n<li>A corporate app that will be available for end-users.</li>\n<li>An app with deep integration at the OS level, such as creating widgets, background execution, and virtual assistant integration.</li>\n</ol>\n<p>You also need to note how you prefer your users to find and use your app. While many developers think of the app store as their first thought, it may not be the best option for many use cases. If your app will offer micro-interactions or be attached to geolocation (think about a QR code that triggers an app), maybe the app store is not your best friend because it will add friction, and you may have a better conversion with a PWA.</p>\n<h3 id=\"native-or-web\">Native or Web?</h3>\n<p>If you think about PWAs, you may also think about the &ldquo;native or web&rdquo; dilemma. That question has been in the community for more than a decade. But thinking about it today, that binary view doesn&rsquo;t fit with reality anymore. For example:</p>\n<ul>\n<li>A PWA can include partially or entirely binary code in WebAssembly, and its user interface in WebGL. Is that Web or native?</li>\n<li>You can use pure JavaScript to create your app with React Native. Is that Web or native?</li>\n<li>A platform-specific app published in app stores can use Cordova, a Web View, or a Trusted Web Activity to render all or part of its contents with a PWA. Is that Web or native?</li>\n</ul>\n<p>As you can see, there are a lot of gray areas these days. Instead of thinking about &ldquo;native or web,&rdquo; we can separate the possibilities into four groups: Packaging, Compilation, User Interface, and Distribution.</p>\n<h3 id=\"packaging\">Packaging</h3>\n<p>In this category, we will separate platforms based on:</p>\n<ul>\n<li>You need to create a platform-specific package as the product, such as an IPA for iOS, an APK/AAB for Android, or an APPX for Windows.</li>\n<li>You don&rsquo;t need to package the app, as in a web app.</li>\n</ul>\n<div className=\"responsive-table\" tabindex=\"0\" role=\"region\" aria-label=\"data table\">\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>Packaging</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android SDK</td>\n<td>Packages APKs and AABs</td>\n</tr>\n<tr>\n<td>iOS SDK</td>\n<td>Packages IPAs / macOS bundles</td>\n</tr>\n<tr>\n<td>Flutter</td>\n<td>Packages APKs, AABs, IPAs, APPXs, macOS, and Linux bundles. No package for web</td>\n</tr>\n<tr>\n<td>React Native</td>\n<td>Packages APKs, AABs, IPAs, APPXs, and macOS bundles. No package for web</td>\n</tr>\n<tr>\n<td>Progressive Web Apps</td>\n<td>No packaging</td>\n</tr>\n<tr>\n<td>Xamarin / .NET MAUI</td>\n<td>Packages APKs, AABs, IPAs, APPXs, TPKs, and macOS bundles.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"compilation\">Compilation</h3>\n<p>In this category, we can separate the platforms based on their language, their work with source code, and if you will deliver source or compiled code (intermediate or platform machine code).</p>\n<p>For example, some platforms will ship source code, others compile it once for a virtual machine, while others make different compilations for different operating systems and architectures.</p>\n<div className=\"responsive-table\" tabindex=\"0\" role=\"region\" aria-label=\"data table\">\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>Language You Write</th>\n<th>You Deploy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android SDK</td>\n<td>Java and Kotlin</td>\n<td>Dalvik executable code</td>\n</tr>\n<tr>\n<td>iOS SDK</td>\n<td>Swift, C++, Objective-C</td>\n<td>Binary code</td>\n</tr>\n<tr>\n<td>Flutter</td>\n<td>Dart</td>\n<td>Binary code (one per platform), and JavaScript source code</td>\n</tr>\n<tr>\n<td>React Native</td>\n<td>JavaScript</td>\n<td>JavaScript source code</td>\n</tr>\n<tr>\n<td>Progressive Web Apps</td>\n<td>JavaScript</td>\n<td>JavaScript source code</td>\n</tr>\n<tr>\n<td>Xamarin / .NET MAUI</td>\n<td>C#</td>\n<td>Intermediate code (Android), Binary code (one per other platform)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"user-interface\">User Interface</h3>\n<p>There are two groups in this category:</p>\n<p>First is how you define and code your user interface.</p>\n<ul>\n<li>In an external declarative file, such as XML, template, or HTML.</li>\n<li>In source code programmatically, such as with JSX or creating UI components in a function.</li>\n</ul>\n<p>Then, when designing your user interface, each platform will use one of the following options:</p>\n<ul>\n<li>Use the&nbsp;<em>official UI toolkit</em>&nbsp;in the operating system: if you render a button, it will be the same instance type as the ones you see in the operating system and system apps.</li>\n<li>Use a&nbsp;<em>web UI interface</em>: you have to render your user interface using web technologies: HTML, CSS, SVG, and canvas.</li>\n<li>Use an&nbsp;<em>alternative UI toolkit</em>: in this case, the framework re-designs UI elements in a low-level canvas API. It doesn&rsquo;t use the default UI toolkit in the operating system.</li>\n</ul>\n<div className=\"responsive-table\" tabindex=\"0\" role=\"region\" aria-label=\"data table\">\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>Recommended UI toolkit</th>\n<th>Definition</th>\n<th>Toolkit Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android SDK</td>\n<td>Jetpack Compose</td>\n<td>Programmatically</td>\n<td>Official</td>\n</tr>\n<tr>\n<td>iOS SDK</td>\n<td>SwiftUI</td>\n<td>Programmatically</td>\n<td>Official</td>\n</tr>\n<tr>\n<td>Flutter</td>\n<td>Material / Cupertino (Apple-flavored)</td>\n<td>Programmatically</td>\n<td>Alternative</td>\n</tr>\n<tr>\n<td>React Native</td>\n<td>Views mapping to UIKit/Android views</td>\n<td>Programmatically</td>\n<td>Official</td>\n</tr>\n<tr>\n<td>Progressive Web Apps</td>\n<td>HTML</td>\n<td>Declarative</td>\n<td>Web</td>\n</tr>\n<tr>\n<td>Xamarin / .NET MAUI</td>\n<td>XML/Storyboards/XAML</td>\n<td>Declarative</td>\n<td>Official</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"distribution\">Distribution</h3>\n<p>Distribution is also one key aspect of deciding on a platform. In this case, one platform can support multi-distribution channels between:</p>\n<ul>\n<li><em>App stores and catalogs</em>, such as Google Play Store, Apple AppStore, Huawei AppGallery, or Microsoft Store</li>\n<li><em>Sideloading</em>, such as installing the app from your website, through USB, or by sending the installer package to the user</li>\n<li><em>Web Browser</em>, such as using the app from a browser using a URL (manually typed, from a QR code or NFC tag, or a link shared to the user). Thanks to the PWA platform, the user can install the app from the browser in the operating system without sideloading or an app store.</li>\n</ul>\n<div className=\"responsive-table\" tabindex=\"0\" role=\"region\" aria-label=\"data table\">\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>AppStores and Catalogs</th>\n<th>Sideloading</th>\n<th>Web Browser</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android SDK</td>\n<td>Google Play Store, Amazon AppStore, Huawei AppGallery, Microsoft Store</td>\n<td>available</td>\n<td>no</td>\n</tr>\n<tr>\n<td>iOS SDK</td>\n<td>Apple AppStore</td>\n<td>only for enterprise</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Flutter</td>\n<td>Google Play Store, Apple AppStore, Amazon AppStore, Huawei AppGallery, Microsoft Store</td>\n<td>only for enterprise on Apple / available on other platforms</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>React Native</td>\n<td>Google Play Store, Apple AppStore, Amazon AppStore, Huawei AppGallery, Microsoft Store</td>\n<td>only for enterprise on Apple / available on other platforms</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Progressive Web Apps</td>\n<td>Google Play Store with TWA, Microsoft Store, AppStore with AppBoundDomains</td>\n<td>no need</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Xamarin / .NET MAUI</td>\n<td>Google Play Store, Apple AppStore, Amazon AppStore, Huawei AppGallery, Microsoft Store, Tizen Store</td>\n<td>only for enterprise on Apple / available on other platforms</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"top-app-development-platforms\">Top App Development Platforms</h2>\n<p>Now that you know which options are available and their differences let&rsquo;s discuss every possibility in more detail with samples of each one as the final help you can receive to make a decision for your app.</p>\n<h3 id=\"flutter\">Flutter</h3>\n<p><a href=\"https://flutter.dev/\">Flutter</a>&nbsp;is an open-source framework created and maintained by Google that will help you develop and compile a cross-platform app for desktop, mobile, and even the Web as a Progressive Web App.</p>\n<p>It uses Dart as its source code, and the standard toolchain involves the Flutter CLI, Android Studio, or Visual Studio Code as your IDE and the SDKs for each platform you want to compile. For example, if you&rsquo;re going to compile for iOS, you will need a macOS computer and Xcode installed. The toolkit includes a fast development process with Hot Reload, so you can see changes in your devices or emulators without recompiling and repackaging your app.</p>\n<p>&nbsp;</p>\n<p>Flutter is heavily based on the concept of&nbsp;<em>Widget</em>. Everything is a Widget. Do you want a Button? It&rsquo;s a Widget. Do you like it centered on the screen? It&rsquo;s a Widget. Do you want to capture a gesture on it? It&rsquo;s a Widget. Widgets are objects of a class that you declare with a simple and nested Dart syntax that takes some time to get used to, but it&rsquo;s simpler and faster than you think at first sight. Like React&rsquo;s class components, you can create Stateless or Stateful widgets in Flutter.</p>\n<p>Flutter doesn&rsquo;t use every platform&rsquo;s UI toolkit. Still, it does a low-level high-performance pixel rendering of UI elements, cloning the Material Design UI typically found on Android or the Apple UI element designs under the&nbsp;<em>Cupertino</em>&nbsp;package. If you want your app to have an iOS design on Apple devices and a Material design on Android and other devices, you will have to abstract your UI widgets with some work.</p>\n<p>If you target the Web, it can create a Progressive Web App, designing the UI with HTML and CSS when possible or with a 2d JavaScript-based canvas, the default value. You will deploy the web files as with any other web app.</p>\n<p>If you target any other platform, you will get a binary package ready to deploy in app stores or to sideload, if available.</p>\n<p>Let&rsquo;s see what a screen looks like in Dart and Flutter.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-Dart\" data-lang=\"Dart\">class OrderItem extends StatelessWidget {\n  final ItemInCart item;\n  final Function onRemove;\n  const OrderItem({Key? key, required this.item, required this.onRemove})\n      : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      elevation: 4,\n      child: Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            Expanded(\n                flex: 10, // width: 10%\n                child: Padding(\n                  padding: const EdgeInsets.only(left: 8.0),\n                  child: Text(\"${item.quantity}x\"),\n                )),\n            Expanded(\n                flex: 60, // width: 60%\n                child: Text(\n                  item.product.name,\n                  style: const TextStyle(fontWeight: FontWeight.bold),\n                )),\n            Expanded(\n                flex: 20, // width: 20%\n                child: Text(\"\\$\" +\n                    (item.product.price * item.quantity).toStringAsFixed(2))),\n            Expanded(\n                flex: 10, // width: 10%\n                child: IconButton(\n                    color: Theme.of(context).primaryColor,\n                    onPressed: () {\n                      onRemove(item.product);\n                    },\n                    icon: const Icon(Icons.delete)))\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n</div>\n<h3 id=\"progressive-web-apps\">Progressive Web Apps</h3>\n<p>When it&rsquo;s time to think on the Web and use standard technologies to create an app, you think about&nbsp;<a href=\"https://web.dev/learn/pwa\">PWAs (Progressive Web Apps)</a>. It&rsquo;s a set of technologies available in modern browsers that let you create a web app and then define metadata and a component known as a Service Worker that will upgrade your app experience with offline support and installation.</p>\n<p>By default, users can use your PWA from the browser without installation, but if wanted, they can install it also from a browser. That process works on iOS, Windows, Android, macOS, Linux, ChromeOS, and more. Once the user has installed it, the app experience will look like any other application on that device: an icon in the launcher, start menu or home screen, a standalone window, and some additional OS integration.</p>\n<p>A PWA is just a web app, so you can use any stack of technologies you want: from plain vanilla JavaScript to React, Angular, Vue, Unity, or Next.js applications. You can run high-performant native code with WebASM and have access to&nbsp;<a href=\"https://web.dev/learn/pwa/capabilities/\">hardware and OS integration with capabilities APIs</a>.</p>\n<p>&nbsp;</p>\n<p>One of the most significant advantages of PWAs compared with the other solutions using standard technologies and stacks is the simplicity of deploying and updating the app. There is no need for an app store publishing process, and their QA waiting times while updating the app can be done silently without the user&rsquo;s or device&rsquo;s intervention.</p>\n<p>&nbsp;</p>\n<p>After you have a web app, you have to add a manifest file that will look like this:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-json\" data-lang=\"json\">{\n  \"name\": \"Frontend Masters\",\n  \"short_name\": \"FEM\",\n  \"theme_color\": \"red\",\n  \"background_color\": \"silver\",\n  \"start_url\": \"./\",\n  \"id\": \"fem-1\",\n  \"display\": \"standalone\",\n  \"scope\": \"./\",\n  \"icons\": [\n     {\n        \"src\": \"icon.png\",\n        \"type\": \"image/png\",\n        \"sizes\": \"512x512\"\n     }\n   ]\n}\n</code></pre>\n</div>\n<p>Finally, you will need to set up a Service Worker that will act as your local web server in one of the possible use cases:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-js\" data-lang=\"js\">import { registerRoute } from 'workbox-routing';\nimport { CacheFirst } from 'workbox-strategies';\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response';\n\nconst pageStrategy = new CacheFirst({\n  // Put all cached files in a cache named 'pages'\n  cacheName: 'pages',\n  plugins: [\n    // Only requests that return with a 200 status are cached\n    new CacheableResponsePlugin({\n      statuses: [200],\n    }),\n  ],\n});\n</code></pre>\n</div>\n<p>Your PWA is not just installable from the browser; if you pass the business rules of app stores, you can also publish a PWA launcher to them while keeping the advantages of being Web and silently updatable.</p>\n<h3 id=\"ios-sdk\">iOS SDK</h3>\n<p>Xcode is the IDE available on macOS only that lets you develop and compile native apps for all Apple platforms, including iOS and iPadOS. During the years, Objective-C and Swift were available as languages, while many ways to design the UI were available such as UIKit and Storyboards.</p>\n<p>Today, Apple has many operating systems in the market, merging all its platforms into a single framework and way of doing apps:&nbsp;<a href=\"https://developer.apple.com/xcode/swiftui/\">SwiftUI</a>. Using the Swift language and a powerful programmatic simple syntax, you can design your apps in code while still having support from the IDE for partial previews of your components (known as views) and drag and drop.</p>\n<p>&nbsp;</p>\n<p>With SwiftUI, you can have a complete app with navigation and nice transitions in just a glance by creating a couple of view declarations in Swift&rsquo;s structures. You can compile the app ready for the App Store or sideloading for corporate applications only.</p>\n<p>If you are familiar with front-end responsive UI frameworks such as Angular or React, you will find yourself at home with SwiftUI.</p>\n<p>A SwiftUI view sample looks like this:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-swift\" data-lang=\"swift\">struct OrderItem: View {\n  var item: (Product, Int)\n  @EnvironmentObject var cartManager: CartManager\n   \n  var body: some View {\n    HStack {\n      Text(\"\\(item.1)x\")\n      Text(item.0.name)\n      Spacer()\n      Text(\"$ \\(Double(item.1)*item.0.price, specifier: \"%.2f\")\")\n      Image(systemName: \"trash\")\n        .font(.title)\n        .foregroundColor(Color(\"Secondary\"))\n        .padding()\n        .onTapGesture {\n          cartManager.remove(product: item.0)\n        }\n    }\n  }\n}\n</code></pre>\n</div>\n<h3 id=\"android-sdk\">Android SDK</h3>\n<p>The Android platform has an extensive set of tools and libraries that have been available for over a decade. Still, the team recently released the new generation of UI toolkit for Android:&nbsp;<a href=\"https://developer.android.com/jetpack/compose\"><em>Jetpack Compose</em></a>.</p>\n<p>With the IDE Android Studio and Jetpack Compose, you can create nice-looking apps with less code and a fast development process using the Kotlin language. Kotlin is a language that, for Android apps, compiles into the Dalvik intermediate language that developers commonly created from Java years ago.</p>\n<p>&nbsp;</p>\n<p>JetPack compose lets you create&nbsp;<em>composables</em>: functions that return a piece of user interface with its interaction, similar to what a functional component means in the React ecosystem. These composable functions can be nested in what ends up being your app&rsquo;s user interface.</p>\n<p>Jetpack Compose is trying to replace the tedious classic declarative XML-based UI toolkit on Android that is still available and compatible with this new modern framework.</p>\n<p>You code your app&rsquo;s logic and other layers using Java or Kotlin and the APIs available in the Android SDK and in a set of open source libraries known as Jetpack. From Android Studio, you can package an AAB for Google Play Store or an APK ready for sideloading and some alternative stores such as Microsoft Store for Windows or the Amazon AppStore.</p>\n<p>A composable with Kotlin looks like the following code:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-kotlin\" data-lang=\"kotlin\">@Composable\nfun CartItem(it: ItemInCart, onDelete: (Product)-&gt;Unit) {\n    Row(\n        horizontalArrangement = Arrangement.SpaceEvenly,\n        modifier = Modifier\n            .padding(16.dp)\n            .fillMaxWidth()\n\n    ) {\n        Text(\"${it.quantity}x\")\n        Text(it.product.name,\n            modifier = Modifier.width(150.dp)\n        )\n        Text(\"$${(it.quantity*it.product.price).format(2)}\",\n            modifier = Modifier.width(50.dp)\n        )\n        Image(\n            imageVector = Icons.Filled.Delete,\n            contentDescription = \"Delete\",\n            colorFilter = ColorFilter.tint(Primary),\n            modifier = Modifier.clickable {\n                onDelete(it.product)\n            }\n        )\n    }\n}\n</code></pre>\n</div>\n<h3 id=\"xamarin--net-maui\">Xamarin / .NET MAUI</h3>\n<p>Microsoft has been supporting .NET users in the mobile app for a while now with the&nbsp;<a href=\"https://dotnet.microsoft.com/apps/xamarin\">Xamarin framework</a>. It is a way to develop iOS, Windows, macOS, and Android apps with C# and .NET.</p>\n<p>It needs a version of Visual Studio and the iOS and Android SDKs in Xamarin basic form. While it lets you share business logic in C#, the user interface was done in each platform&rsquo;s classic UI framework, such as XAML for Windows, XMLs for Android, and Xcode Storyboards for iOS. You don&rsquo;t share UI code between platforms.</p>\n<p>Also, you still need to understand each platform&rsquo;s specifics and use the classes every SDK needs for an app, such as&nbsp;<code>UIApplication</code>&nbsp;for iOS or&nbsp;<code>Activity</code>&nbsp;for Android. Still, instead of using Swift and Kotlin/Java, you use C# for all the platforms.</p>\n<p>Because you still need to create two or three apps within the Xamarin project, the team created a new idea known as&nbsp;<em>Xamarin.Forms</em>&nbsp;to design your apps once for all the platforms. That idea evolved in 2022 as a new framework:&nbsp;<em><a href=\"https://docs.microsoft.com/dotnet/maui/\">.NET MAUI (Multiplatform App User Interface)</a></em>.</p>\n<p>&nbsp;</p>\n<p>MAUI may replace Xamarin in the future, and today, both projects are available if you use Visual Studio to create apps. MAUI is more similar to Flutter and React Native, where from one source, you compile apps for several platforms at the same time instead of having to create separate code for each, as in Xamarin.</p>\n<p>MAUI abstracts the user interface in a declarative XAML file and then uses different UI frameworks on each target operating system to render that content. The XAML file with data binding looks like the following sample:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-xml\" data-lang=\"xml\">&lt;ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:className=\"XamlSamples.SliderBindingsPage\"\n             Title=\"Slider Bindings Page\"&gt;\n    &lt;StackLayout&gt;\n        &lt;Label Text=\"ROTATION\"\n               BindingContext=\"{x:Reference slider}\"\n               Rotation=\"{Binding Path=Value}\"\n               FontAttributes=\"Bold\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" /&gt;\n        &lt;Slider x:Name=\"slider\"\n                Maximum=\"360\"\n                VerticalOptions=\"Center\" /&gt;\n        &lt;Label BindingContext=\"{x:Reference slider}\"\n               Text=\"{Binding Value, StringFormat='The angle is {0:F0} degrees'}\"\n               FontAttributes=\"Bold\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" /&gt;\n    &lt;/StackLayout&gt;\n&lt;/ContentPage&gt;\n</code></pre>\n</div>\n<h3 id=\"react-native\">React Native</h3>\n<p>React.js was so popular for the Web that Meta (Facebook, then) created a tool to use the same ideas, patterns, and JSX but for compiling native apps instead of web apps; it&rsquo;s called&nbsp;<a href=\"https://reactnative.dev/\">React Native</a>.</p>\n<p>React Native is the most used cross-platform app development framework, with Flutter about to cross it getting more and more developers every year. With React Native, you use and ship JavaScript code that a native runtime executes and instantiates native UI components to render on the screen. So, it looks like React, but it has no HTML rendering on it.</p>\n<p>You use the typical React ecosystem, including components, JSX, hooks, and libraries such as Redux or React Router. Still, the CLI uses the native SDKs to build the final packages for each platform. The official framework compiles for Android and iOS. Still, additional plugins for other platforms, including &ldquo;React Native for Desktop&rdquo; and &ldquo;React Native for the Web,&rdquo; compile a web app you can use as a Progressive Web App.</p>\n<p>When React Native doesn&rsquo;t offer a JavaScript API for what you need, you can always write your native plugins (for example, using Swift for iOS and Kotlin for Android) that you can use from JavaScript through a bridge. Like React.js, you can use functions or classes to create your components.</p>\n<p>&nbsp;</p>\n<p>A typical React Native set of components with styles may look like this:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">const Item = ({ title }) =&gt; (\n  &lt;View style={styles.item}&gt;\n    &lt;Text style={styles.title}&gt;{title}&lt;/Text&gt;\n  &lt;/View&gt;\n);\n\nconst App = () =&gt; (\n  &lt;SafeAreaView style={styles.container}&gt;\n    &lt;SectionList\n      sections={DATA}\n      keyExtractor={(item, index) =&gt; item + index}\n      renderItem={({ item }) =&gt; &lt;Item title={item} /&gt;}\n      renderSectionHeader={({ section: { title } }) =&gt; (\n        &lt;Text style={styles.header}&gt;{title}&lt;/Text&gt;\n      )}\n    /&gt;\n  &lt;/SafeAreaView&gt;\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16\n  },\n  item: {\n    backgroundColor: \"#f9c2ff\",\n    padding: 20,\n    marginVertical: 8\n  },\n  header: {\n    fontSize: 32,\n    backgroundColor: \"#fff\"\n  },\n  title: {\n    fontSize: 24\n  }\n});</code></pre>\n</div>",
      "image": "/assets/img/post5-min.webp",
      "author": "Maximiliano Firtman",
      "history": "Nov 21"
    },
    {
      "id": 6,
      "title": "Getting into Game Development and the Gaming Industry",
      "description": "If you like to play video games or are in the orbit of technical jargon, you’ve probably heard about game engines like Unity and Unreal. These industry leaders power a massive chunk of the modern gaming industry.",
      "content": "<h2 id=\"how-game-engines-like-unity-help-you-get-into-game-development\">How Game Engines Like Unity Help You Get Into Game Development</h2>\n<p>If you like to play video games or are in the orbit of technical jargon, you&rsquo;ve probably heard about game engines like Unity and Unreal. These industry leaders power a massive chunk of the modern gaming industry.</p>\n<p>&nbsp;</p>\n<p>At their core, game engines are software applications that allow you to create real-time experiences. That&rsquo;s it! These experiences might happen to be 2D with beautifully crafted sprites, or they might be 3D and utilize impressive shaders and effects. They might be deployed to the web, gaming consoles, mobile devices, or VR and AR headsets. And while it&rsquo;s no coincidence that many of these real-time experiences happen to be video games - that was, after all, the original purpose of&nbsp;<em>game</em>&nbsp;engines - it often surprises people to learn that game engines are used for so much more.</p>\n<p>It&rsquo;s natural to assume that game engines are just for games; it&rsquo;s right there in the name! However, the role of a game engine has evolved so much that I think the term has become a misnomer. Today, game engines are used in Hollywood filmmaking, architectural visualization, theme park attractions, and web development. Nearly every business vertical needs real-time software, whether in the form of WebGL-based data visualizations, AR product tours, or immersive simulations. Learning how to use a game engine might seem like a big departure from web development, and in some ways, it is, but it can also be a natural extension to existing skills that expand your ability to create impactful experiences that resonate with people. And the really great thing about modern game engines is that you can write your core application once, and with just a bit more work, you can deploy it to a wide variety of devices.</p>\n<p>When I first started making websites 20 years ago, I gravitated toward the web because it felt like the ultimate creative medium. It was an interactive wonderland with &ldquo;read&nbsp;<em>and</em>&nbsp;write&rdquo; capabilities, which set it apart from books, TV, and film. However, when 3D-driven technologies like WebGL and VR started coming online about 10 years ago, there was a shift in my subconscious thinking. I didn&rsquo;t want just to create&nbsp;<em>interactive</em>&nbsp;experiences; I wanted to create&nbsp;<em>immersive</em>&nbsp;experiences that could captivate hearts and minds. Luckily, all the necessary tools were rapidly becoming democratized and commercialized.</p>\n<p>Until then, the &ldquo;professional&rdquo; (and worthwhile) game engines were proprietary and behind the closed doors of titans like EA and Ubisoft, but that started to change with the advent of mobile app stores. Small independent developers needed a way to prototype and deploy mobile games rapidly, so they turned to off-the-shelf tools like Unity and Unreal. By the early 2010s, one person could create a hit game with their laptop and spare time, and a new landscape of game development came into focus.</p>\n<h2 id=\"unity-vs-unreal-vs-everything-else-where-should-you-start\">\u200B\u200BUnity vs Unreal vs Everything Else: Where Should You Start?</h2>\n<p>There are lots of game engines available, and you could even build a game engine yourself, but there&rsquo;s no correct choice; only the choice that&rsquo;s right for you, your project, your team, or your company.</p>\n<p>If you&rsquo;re an ambitious and creative person, you might be tempted to build your own game engine from scratch, but unless it&rsquo;s purely for fun or academic purposes, I advise sticking to the established choices. Making real-time experiences is hard enough, and you&rsquo;ll need to apply all the tooling and leverage available to make it happen. Building a modern engine that powers your creativity is a monumental task, not for the faint of heart. I commend people with that drive and focus, but I am not one of them.</p>\n<p>While many free game engines are available, the two de facto leaders are Unity and Unreal.</p>\n<p>&nbsp;</p>\n<p>Unity is made by a company of the same name (Unity Technologies) and Epic Games make Unreal. In the right hands, both are perfectly capable of producing world-class results, and their similarities are greater than their differences. So which should you choose?</p>\n<p>This is a very hotly debated and opinionated topic, so I would recommend trying both engines for a bit and seeing which suits you better, but here&rsquo;s my take.</p>\n<p>Unreal tends to have the edge in graphics, especially out-of-the-box. The default tools in Unreal Engine V are incredibly powerful and can create dazzling experiences targeting higher-end hardware like consoles and PCs. When client expectations call for the best-looking real-time graphics available, Unreal is usually the choice. It&rsquo;s no surprise that Unreal has found its way into Hollywood productions like The Mandalorian, where it&rsquo;s used to fill real-time LED-lit backgrounds that cast natural light onto the actors on set.</p>\n<p>That said, Unity can still create world-class imagery and most of the time, that discussion point comes down to the capabilities of the artists using the tool. In my opinion, Unity has the advantage overall because it&rsquo;s much easier to start with and use on a day-to-day basis, even in professional settings or on large teams. While Unreal does have &ldquo;visual scripting&rdquo; (called Blueprints), you&rsquo;ll often still need to write C++ code, which has a steep learning curve. Unity scripts are written in the C# programming language, which tends to be much more beginner-friendly, especially if you&rsquo;re coming from another &ldquo;C-like&rdquo; web language such as JavaScript.</p>\n<p>Unity also encourages smart code reuse through its component-based architecture. When you write a C# script in Unity, most of the time, you&rsquo;re creating a component that gets attached to a GameObject, which you can think of as a &ldquo;thing&rdquo; in your game world, like the player character, an enemy, or even just a rock sitting on some terrain. GameObjects don&rsquo;t really do anything by themselves, but when you add components, you can intelligently construct their behavior through&nbsp;<em>composition</em>. Let&rsquo;s say you wanted to create a spinning coin that the player can collect, similar to what you might find in a popular platforming franchise. You could do this all in one script component, but often, a better approach is to create one component that does the spinning and another that allows the player to collect the object. This way, you can reuse the spinning script on a spinning obstacle and use the collection script on other collectible objects, like power-ups.</p>\n<p>&nbsp;</p>\n<p>Over the years, I&rsquo;ve also found that Unity&rsquo;s community makes it the stronger choice. Forums, blogs, and sites like Stack Overflow tend to have a lot more answers when it comes to Unity. Additionally, the Unity Asset Store has an overwhelming abundance of paid and free resources that can jump-start your project, whether you just need a few 3D models or a whole role-playing game system.</p>\n<p>Again, and I cannot stress this enough, make the choice that&rsquo;s right for you. Both Unity and Unreal are free to download, so whether you&rsquo;re embarking on a big expansion of your skills or an entirely new career, it&rsquo;s worth familiarizing yourself with both options to make informed choices.</p>\n<h2 id=\"how-to-get-started-with-development-in-game-engines\">\u200B\u200BHow to Get Started with Development in Game Engines</h2>\n<p>The moment you download a game engine for the first time can be pretty exciting. You might open the default test scenes included with the engine and click around a bit, thinking that you&rsquo;re just mere moments from getting started on the next Fortnite or Minecraft! Your very own money-making franchise! That might be true for one out of every several million of you. Remember Flappy Bird?</p>\n<p>For the rest of us, preparation and education need to meet an opportunity. It can feel daunting trying to figure out how to approach your dream idea, and that&rsquo;s because it&nbsp;<em>is</em>&nbsp;daunting. Lots of new game devs seem to think they&rsquo;re going to rock the scene with their &ldquo;super original&rdquo; metaverse MMORPG, and they end up getting burnt out and frustrated when they can&rsquo;t seem to get beyond the starting line. Don&rsquo;t be one of those people. Instead, embrace the creative limitations of being an independent risk taker and use them to your advantage!</p>\n<p>Focus on something smaller that you can accomplish.&nbsp;<em>Much</em>&nbsp;smaller. In fact, I challenge you to try and come up with the smallest idea you can think of that you&rsquo;d still call a game and start with that because you&rsquo;ll be amazed at how much labor it takes to create quality, even with powerful tools like Unity and Unreal at your disposal. You could also start by making your own versions of classic games like Pong, Breakout, Space Invaders, Pacman, or Tetris. In my course on Frontend Masters, &ldquo;<a href=\"https://frontendmasters.com/courses/unity/\">Unity for Web Developers</a>&rdquo;, I teach students how to create a simple physics-based marble game and deploy it to WebGL so that anyone with a web browser can play.&nbsp;<a href=\"https://nickpettit.github.io/unity-for-web-developers-webgl/\">You can try it out in your browser using WebGL.</a></p>\n<p>&nbsp;</p>\n<p>Once you&rsquo;ve created your first few tiny games, there are a couple of ways you can proceed. You might try engaging with the community on the Unity forums, Reddit, or Twitter. It&rsquo;s also worth checking out Meetup.com to see if there are any game development groups in your local area. When you engage with the community in these ways, you might find job opportunities or contract gigs that you never imagined were there. Conversely, you may find that while these communities are technically minded, they need someone like you who has web development skills. When I first plugged into my local community, I joined a meetup group, and I helped them out by updating and maintaining their website for a while. This ended up being a great way to immerse me in the local scene and give back to the same community that was helping me launch my first indie games.</p>\n<p>If you&rsquo;re very passionate about game dev, you might decide that you want to turn it into a career. Most game development studios will expect at least one shipped console title (as in PlayStation, Xbox, or Switch) on your resume, which is tricky. How can you ship a video game if you&rsquo;ve never worked at a game company before? If working for a studio is your goal, you can&hellip;</p>\n<ul>\n<li>Try to ship a game by yourself. This is a brutally difficult path that I took, and it took me several years, but I did end up with a game on PS4 and PSVR by the end of it, and I am now happily making games professionally.</li>\n<li>Find an indie team in the community or a smaller company and work your way up. There are lots of small and medium-sized companies that won&rsquo;t have high expectations of an established studio.</li>\n<li>Get an internship somewhere. This may not be practical for many people, but it is an option if you&rsquo;re willing and able to do it.</li>\n<li>Find a company that isn&rsquo;t making games but is using the same technologies and skills that will carry over. Many companies are looking for talented Unity and Unreal developers, and it&rsquo;s not just game studios, so be sure to search broadly.</li>\n</ul>\n<p>There are no easy answers when it comes to making gaming a career. It&rsquo;s tough! However, if you&rsquo;re looking to expand your existing web development skills or offer more to your clients, a game engine is a fine choice for your toolbox!</p>",
      "image": "/assets/img/post6-min.png",
      "author": "Nick Pettit",
      "history": "Nov 8"
    },
    {
      "id": 7,
      "title": "Tackling CSS Specificity",
      "description": "How often have you been frustrated because you’ve just joined a new project and can’t figure out why your styles aren’t being applied properly? Or maybe you’ve just integrated a new library, and suddenly all of your styles are being overridden. You could slap an !important declaration onto your styles and call it a day, but that would throw maintainability out the window. So you’ve finally decided to learn about CSS specificity.",
      "content": "<p>How often have you been frustrated because you&rsquo;ve just joined a new project and can&rsquo;t figure out why your styles aren&rsquo;t being applied properly? Or maybe you&rsquo;ve just integrated a new library, and suddenly all of your styles are being overridden. You could slap an&nbsp;<code>!important</code>&nbsp;declaration onto your styles and call it a day, but that would throw maintainability out the window. So you&rsquo;ve finally decided to learn about CSS specificity.</p>\n<p>Specificity is one of the foundational concepts of CSS, and understanding it allows you to write maintainable, efficient CSS. So what exactly is specificity?</p>\n<h2 id=\"what-is-css-specificity\">What Is CSS Specificity?</h2>\n<p>CSS specificity is the algorithm browsers use to determine which style declarations should be applied to an element. Each selector is assigned a particular weight depending on its specificity and then these weights are measured against each other to determine which style rules win for a particular element. We calculate specificity using three categories: ID, class, and type. Let&rsquo;s take a deeper look into these weighted selector categories.</p>\n<h2 id=\"weighted-selectors\">Weighted Selectors</h2>\n<p>The&nbsp;<strong>ID</strong>&nbsp;category includes ID selectors (i.e.&nbsp;<code>#about</code>). For every ID in a selector, add 1-0-0 to the weight.</p>\n<p>The&nbsp;<strong>class</strong>&nbsp;category includes class selectors (i.e.<code>.about</code>), attribute selectors (i.e.&nbsp;<code>[type=\"button\"]</code>), and pseudo-classes (i.e.&nbsp;<code>:hover</code>,&nbsp;<code>:checked</code>). For every class, attribute, and pseudo-class in a selector, add 0-1-0 to the weight.</p>\n<p>The&nbsp;<strong>type</strong>&nbsp;category includes type selectors (i.e.&nbsp;<code>h3</code>,&nbsp;<code>aside</code>) and pseudo-elements (i.e.&nbsp;<code>::after</code>). For every type and pseudo-element in a selector, add 0-0-1 to the weight.</p>\n<h2>&nbsp;</h2>\n<h2 id=\"calculating-specificity\">Calculating Specificity</h2>\n<p>For each of the categories above, we add one to each respective column when we use a selector of that type. For example, if a selector contains a type followed by an ID, we would add a 1 in the ID column and a 1 in the type column giving us a specificity of 1-0-1.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-css\" data-lang=\"css\">/* 1-0-1 */\naside #paragraph {\n  ...\n}\n</code></pre>\n</div>\n<p>To calculate which selector is more specific, we compare the values found in each column. For example, let&rsquo;s say we have two selectors, each styling a paragraph element.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-css\" data-lang=\"css\">.paragraph {\n  ...\n}\n\n.aside p {\n  ...\n}\n</code></pre>\n</div>\n<p>The first selector contains only one class, so its value is 0-1-0.</p>\n<p>The second selector contains a class selector and a type selector, so its value is 0-1-1.</p>\n<h2>&nbsp;</h2>\n<p>Now we can compare the two selectors column by column. Starting with the most specific column, the ID selectors column, both selectors have a 0, so we can move on to the next column.</p>\n<p>In the classes, pseudo-classes, and attribute selectors column, each selector has a 1. Since these values are equal, we must compare the third column to determine which selector wins. In the final column, type selectors and pseudo-elements, only the second selector has a 1, so it is more specific.</p>\n<h2>&nbsp;</h2>\n<h2 id=\"examples-of-calculating-specificity\">Examples of Calculating Specificity</h2>\n<p>Let&rsquo;s look at a few more examples and see if we&rsquo;re comfortable before moving on.</p>\n<p>In the first example, we have three selectors. These three selectors are all attempting to change the color of a paragraph&rsquo;s text. The first selector uses two class selectors; the second selector uses a class selector followed by a type selector. The third selector uses two type selectors.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-css\" data-lang=\"css\">.my-aside .my-paragraph {\n  color: blue;\n}\n\n.my-aside p {\n  color: red;\n}\n\naside p {\n  color: yellow;\n}\n</code></pre>\n</div>\n<p>Let&rsquo;s evaluate each of these selectors using the three-column method.</p>\n<h2>&nbsp;</h2>\n<ol>\n<li>The first selector&nbsp;<code>.my-aside .my-paragraph</code>&nbsp;contains two classes, so it gets a two in the second column.</li>\n<li>The second selector&nbsp;<code>.my-aside p</code>&nbsp;includes a class and a type selector, so it gets one in the second and third columns.</li>\n<li>The last selector&nbsp;<code>aside p</code>&nbsp;contains two types, so it gets a two in the third column.</li>\n</ol>\n<p>Starting from column one, none of the selectors have an ID, so we move on to column two. In column two, we see that the first selector contains two classes while the other selectors contain one and zero, respectively. Thus, selector one is the most specific, and we don&rsquo;t need to examine column three (assuming all three selectors are styling the same CSS property).</p>\n<h2>&nbsp;</h2>\n<p>The first example was pretty clear cut, but what if we have two selectors of equal weight attempting to style the same element?</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  .aside .paragraph {\n    color: blue;\n  }\n\n  .my-aside .my-paragraph {\n    color: red;\n  }\n&lt;/style&gt;\n\n&lt;aside className=\"aside my-aside\"&gt;\n  &lt;p className=\"paragraph my-paragraph\"&gt;...&lt;/p&gt;\n&lt;/aside&gt;\n</code></pre>\n</div>\n<p>We can see here that both selectors attempt to style the same paragraph element and have a specificity of 0-2-0. So which color will the paragraph text be?</p>\n<h2>&nbsp;</h2>\n<p>The text will be red because the latest CSS declaration wins.&nbsp;<strong>When two selectors of equal weight attempt to style the same CSS property, the latest, or most recent, declaration wins</strong>.</p>\n<p>If you want the text to be blue, you&rsquo;ll have to increase the specificity of the first selector or decrease the specificity of the second selector. You could also change the order of the declarations so the first selector becomes the latest selector.</p>\n<h2 id=\"unweighted-selectors\">Unweighted Selectors</h2>\n<p>In the previous section we took a look at weighted selectors, or selectors that contribute to a selector&rsquo;s specificity. There are, however, some selectors which are unweighted and do not contribute to a selector&rsquo;s specificity weight.</p>\n<p>These selectors include:</p>\n<ul>\n<li>The universal selector (*)</li>\n<li>The :where() pseudo-class</li>\n<li>Combinators (i.e. +, &gt;)</li>\n<li>The :is() pseudo-class (the selectors inside the parentheses are weighted)</li>\n<li>The :not() pseudo-class (the selectors inside the parentheses are weighted)</li>\n</ul>\n<p>Let&rsquo;s take a look at a few examples containing unweighted selectors.</p>\n<h3 id=\"example-of-unweighted-selectors\">Example of Unweighted Selectors</h3>\n<p>Here we have three sections that contain paragraphs of text. The second section has a class of&nbsp;<code>highlight</code>.</p>\n<p>In our CSS, the first selector selects all paragraphs that are direct children of elements containing a class of&nbsp;<code>highlight</code>.</p>\n<p>The second selector selects all paragraphs that are descendants of section elements that do not contain the class&nbsp;<code>highlight</code>.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  .highlight &gt; p {\n    background: yellow;\n  }\n\n  section:not(.highlight) p {\n    background: blue;\n    color: white;\n  }\n&lt;/style&gt;\n\n&lt;section&gt;\n  &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus modi \n    quasi in nisi nobis! Accusamus possimus perferendis consectetur libero \n    ut dolorem eveniet officiis aliquam. Accusantium cumque ab ratione\n    exercitationem perspiciatis!&lt;/p&gt;\n&lt;/section&gt;\n\n&lt;section className=\"highlight\"&gt;\n  &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus modi \n    quasi in nisi nobis! Accusamus possimus perferendis consectetur libero \n    ut dolorem eveniet officiis aliquam. Accusantium cumque ab ratione\n    exercitationem perspiciatis!&lt;/p&gt;\n&lt;/section&gt;\n\n&lt;section&gt;\n  &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus modi \n    quasi in nisi nobis! Accusamus possimus perferendis consectetur libero \n    ut dolorem eveniet officiis aliquam. Accusantium cumque ab ratione\n    exercitationem perspiciatis!&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>\n</div>\n<p>The UI for this code looks like this. The first and third paragraphs have a blue background and white text (per selector two) and the middle paragraph, which is contained within a section with a class of highlight, has a background color of yellow per selector one.</p>\n<h2>&nbsp;</h2>\n<p>If we take a look at the specificities for each selector we see that selector one has a specificity of 0-1-1 and selector two has a specificity of 0-1-2. Notice that the direct child combinator (<code>&gt;</code>) and the negation pseudo-class (<code>:not()</code>) do not contribute to the weight of the specificity, even though the selector inside of the negation pseudo-class does contribute.</p>\n<h2>&nbsp;</h2>\n<h2 id=\"inline-styles\">Inline Styles</h2>\n<p>Inline styles are added to elements via the style attribute (i.e.&nbsp;<code>style=\"color: blue\"</code>) and override any author-defined styles. The only styles that override inline styles use the&nbsp;<code>!important</code>&nbsp;declaration (which we&rsquo;ll discuss in the next section).</p>\n<p>For code maintainability it&rsquo;s recommended to encapsulate your styles in external stylesheets (linked with&nbsp;<code>&lt;link rel=\"stylesheet\" href=\"...\" /&gt;</code>) and don&rsquo;t use inline styles unless absolutely necessary.</p>\n<h3 id=\"example-of-inline-styles\">Example of Inline Styles</h3>\n<p>In the example below, we&rsquo;ve declared a style that should turn all elements with a class of&nbsp;<code>paragraph</code>&nbsp;blue. However, this style is being overridden on the first paragraph by an inline style declaration which sets the paragraph color to red. The second paragraph text will still be blue.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  .paragraph {\n    color: blue;\n  }\n&lt;/style&gt;\n\n&lt;p className=\"paragraph\" style=\"color: red;\"&gt;lorem ipsem&lt;/p&gt;\n&lt;p className=\"paragraph\"&gt;lorem ipsem&lt;/p&gt;\n</code></pre>\n</div>\n<h2 id=\"important\">!important</h2>\n<p>Adding !important to the end of a style is a way for the code author to give a CSS value more weight than it has by default.</p>\n<p>If two conflicting styles contain&nbsp;<code>!important</code>&nbsp;declarations, the higher-specificity declaration wins. If both elements have the same weight, the last declaration wins.</p>\n<p>Unfortunately, using&nbsp;<code>!important</code>&nbsp;has become an &ldquo;easy solution&rdquo; for many developers, leading to specificity chaos and unmaintainable code.&nbsp;<code>!important</code>&nbsp;should not be used unless absolutely necessary. The code becomes more difficult to maintain and disrupts the natural flow of style calculations by giving more weight to selectors which don&rsquo;t necessarily deserve that weight.</p>\n<p><code>!important</code>&nbsp;is a great tool for testing, aiding accessibility, or temporarily fixing an urgent problem, but it should not be considered a long-term solution.</p>\n<p>Let&rsquo;s take a look at an example of how&nbsp;<code>!important</code>&nbsp;impacts style.</p>\n<h3 id=\"example-of-important\">Example of !important</h3>\n<p>Here we have an unordered list with three list items, all wrapped in a div. On line two we select all list items that are direct children of an unordered list. On line 6 (<code>div li</code>) we select all list items contained within a&nbsp;<code>&lt;div&gt;</code>.</p>\n<p>Both of these selectors have equal weights (remember the direct descendent combinator, &lt;, is unweighted) of 0-0-2, and are attempting to style the same CSS property. Under normal circumstances the selector&nbsp;<code>div li</code>&nbsp;would win and the list item text would be red, however we&rsquo;ve added an&nbsp;<code>!important</code>&nbsp;declaration to the style rule on line 3 (<code>color: blue !important;</code>), which overrides the style declared on line 7 (<code>color: red;</code>). Thus, the list item text is blue.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  ul &gt; li {\n    color: blue !important;\n  }\n\n  div li {\n    color: red;\n  }\n&lt;/style&gt;\n\n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n</div>\n<h2>&nbsp;</h2>\n<h2 id=\"specificity-challenges\">Specificity Challenges</h2>\n<p>Now that you&rsquo;ve learned the basics of CSS specificity, it&rsquo;s time to put it to the test. See if you can determine what the UI will look like based on the following code snippets. Answers are provided at the end of this post.</p>\n<h3 id=\"specificity-challenge-1\">Specificity Challenge 1</h3>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  * {\n    font-family: `Arial`, sans-serif;\n  }\n\n  section {\n    margin-bottom: 24px;\n    border: 2px dotted black;\n    padding: 16px;\n  }\n\n  button {\n    background: skyblue;\n    border: none;\n    padding: 12px;\n  }\n\n  p {\n    font-family: 'Tahoma';\n  }\n  \n  .content {\n    font-family: 'Georgia';\n  }\n  \n  #section-1-read-more {\n    background: orange;\n  }\n&lt;/style&gt;\n\n&lt;section&gt;\n  &lt;h1 className=\"title\"&gt;Section 1&lt;/h1&gt;\n  &lt;p className=\"content\"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. \n    Velit maiores...&lt;/p&gt;\n  &lt;p className=\"content\"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. \n    Velit maiores...&lt;/p&gt;\n  &lt;button id=\"section-1-read-more\"&gt;Read more&lt;/button&gt;\n&lt;/section&gt;\n\n&lt;section&gt;\n  &lt;h1 className=\"title\"&gt;Section 2&lt;/h1&gt;\n  &lt;p className=\"content\"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. \n    Velit maiores...&lt;/p&gt;\n  &lt;p className=\"content\"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. \n    Velit maiores...&lt;/p&gt;\n  &lt;button id=\"section-2-read-more\"&gt;Read more&lt;/button&gt;\n&lt;/section&gt;\n</code></pre>\n</div>\n<h3 id=\"specificity-challenge-1-solution\">Specificity Challenge 1 Solution</h3>\n<p>There will be two sections. Each section will have a bottom margin of 24px, a 2px dotted border and 16px padding on all sides.</p>\n<p>Each section header will have a font-family of Arial or another sans-serif font as declared by the universal selector on line 1.</p>\n<p>Each paragraph will have a font family of Georgia because of the content class selector on line 22&nbsp;<code>.content</code>&nbsp;(it overrides the type selector on line 18&nbsp;<code>p</code>).</p>\n<p>Each button will have a padding of 12px on all sides and will not have a border. Only button two will have a background color of&nbsp;<code>skyblue</code>&nbsp;(defined by the type selector on line 12&nbsp;<code>button</code>). The first button will have a background color of orange as defined by the ID selector on line 27&nbsp;<code>#section-1-read-more</code>.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  * { /* 0-0-0 */\n    font-family: 'Arial', sans-serif;\n  }\n\n  section { /* 0-0-1 */ \n    margin-bottom: 24px; \n    border: 2px dotted black; \n    padding: 16px;\n  }\n\n  button { /* 0-0-1 */ \n    background: skyblue; \n    border: none; \n    padding: 12px;\n  }\n  \n  p { /* 0-0-1 */\n    font-family: 'Tahoma';\n  }\n  \n  .content { /* 0-1-0 */\n    font-family: 'Georgia';\n  }\n  \n  #section-1-read-more { /* 1-0-0 */\n    background: orange;\n  }\n&lt;/style&gt;\n... \n</code></pre>\n</div>\n<h2>&nbsp;</h2>\n<h3 id=\"specificity-challenge-2\">Specificity Challenge 2</h3>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  li &gt; a {\n    color: pink;\n    text-decoration: none;\n  }\n  \n  a.link {\n    color: orange;\n  }\n\n  a[visited=\"true\"] {\n    text-decoration: underline;\n  }\n  \n  li:first-of-type a {\n    color: blue;\n  }\n&lt;/style&gt;\n&lt;ul&gt;\n  &lt;li&gt;&lt;a className=\"link\" href=\"#\"&gt;Item 1&lt;/a&gt;&lt;li&gt;\n  &lt;li&gt;&lt;a className=\"link\" href=\"#\" visited=\"true\"&gt;Item 2&lt;/a&gt;\n  &lt;li&gt;&lt;a className=\"link\" href=\"#\"&gt;Item 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n</div>\n<h3 id=\"specificity-challenge-2-solution\">Specificity Challenge 2 Solution</h3>\n<p>There will be an unordered list with three items: item 1, item 2, and item 3. Item 1 will be blue because of the&nbsp;<code>:first-of-type</code>&nbsp;pseudo-class selector on line 15. Items 2 and 3 will be orange. Item 2 will be underlined.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  li &gt; a { /* 0-0-2 */\n    color: pink;\n    text-decoration: none;\n  }\n  \n  a.link { /* 0-1-1 */ \n    color: orange;\n  }\n  \n  a[visited=\"true\"] { /* 0-1-1 */\n    text-decoration: underline;\n  }\n  \n  li:first-of-type a { /* 0-1-2 */\n    color: blue;\n  }\n&lt;/style&gt;\n...\n</code></pre>\n</div>\n<h2>&nbsp;</h2>\n<h3 id=\"specificity-challenge-3\">Specificity Challenge 3</h3>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  input[type=\"text\"] {\n    border: 2px solid red;\n  }\n  \n  input {\n    border: 4px solid purple;\n  }\n  \n  input#first-name {\n    border: 6px solid orange;\n  }\n  \n  #first-name {\n    border: 8px solid black;\n  }\n&lt;/style&gt;\n&lt;label for=\"first-name\"&gt;First name&lt;/label&gt;\n&lt;input id=\"first-name\" type=\"text\"&gt;\n</code></pre>\n</div>\n<h3 id=\"specificity-challenge-3-solution\">Specificity Challenge 3 Solution</h3>\n<p>There will be a label (First name) and a text input. The text input will have a&nbsp;<code>6px solid orange</code>&nbsp;border due to the type/ID selector on line 10&nbsp;<code>input#first-name</code>.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;style&gt;\n  input[type=\"text\"] { /* 0-1-1 */\n    border: 2px solid red;\n  }\n  \n  input { /* 0-0-1 */\n    border: 4px solid purple;\n  }\n  \n  input#first-name { /* 1-0-1 */\n    border: 6px solid orange;\n  }\n  \n  #first-name { /* 1-0-0 */\n    border: 8px solid black;\n  }\n&lt;/style&gt;\n&lt;label for=\"first-name\"&gt;First name&lt;/label&gt;\n&lt;input id=\"first-name\" type=\"text\"&gt;\n</code></pre>\n</div>\n<h2>&nbsp;</h2>\n<h2 id=\"you-learned-specificity\">You Learned Specificity!</h2>\n<p>CSS specificity is tricky, but once you get the gist, it will become second nature. As one of the foundational elements of CSS, having a solid grasp of specificity will allow you to work confidently with legacy code bases and third-party libraries.</p>\n<p>If you want to go further with CSS specificity, here are a few resources for you to check out!</p>\n<h3 id=\"more-resources-on-css-specificity\">More Resources on CSS Specificity</h3>\n<ul>\n<li><a href=\"https://www.matuzo.at/blog/2022/specificity/\">CSS Specificity Demo</a>: An interactive demo that illustrates how CSS specificity impacts style.</li>\n<li><a href=\"https://specificity.keegan.st/\">Specificity Calculator</a>: Input your selectors to see the specificities.</li>\n<li><a href=\"https://stuffandnonsense.co.uk/archives/css_specificity_wars.html\">CSS Specificity Wars</a>: Learn CSS specificity through Star Wars.</li>\n</ul>",
      "image": "/assets/img/post7-min.png",
      "author": "Emma Bostian",
      "history": "Sep 15"
    },
    {
      "id": 8,
      "title": "Writing a TodoMVC App With Modern Vanilla JavaScript",
      "description": "I took a shot at coding TodoMVC with modern (ES6+), vanilla JavaScript, and it only took ~170 lines of code and just over an hour! Compare this to the old/official TodoMVC vanilla JS solution, which has over 900 lines of code. An 80%+ reduction in code! I ❤\uFE0F the new state of JavaScript.",
      "content": "<p>I took a shot at coding&nbsp;<a href=\"https://github.com/1Marc/modern-todomvc-vanillajs\">TodoMVC with modern (ES6+), vanilla JavaScript</a>, and it only took ~170 lines of code and just over an hour! Compare this to the old/official TodoMVC vanilla JS solution, which has over 900 lines of&nbsp;<a href=\"https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs\">code</a>. An 80%+ reduction in code! I ❤\uFE0F the new state of JavaScript.</p>\n<p>The code has received over \uD83E\uDD29 600 stars on GitHub:</p>\n<p>&nbsp;</p>\n<p>In general, the responses were very positive. But as with all popular things, eventually, they spark debate.</p>\n<h2 id=\"react--frameworks-vs-vanilla-js-top-four-arguments-for-frameworks\">React / Frameworks vs. Vanilla JS: Top Four Arguments for Frameworks</h2>\n<h3 id=\"1-frameworks-enable-declarative-ui\">#1: &ldquo;Frameworks Enable Declarative UI&rdquo;</h3>\n<blockquote>\n<p>Modern frameworks like React and Vue don&rsquo;t exist to fill in the gap left by native JS, they exist so that you write your application in a declarative way where the view is rendered as a function of state.</p>\n</blockquote>\n<p>IMO this is simply a design pattern. Patterns apply in any language.</p>\n<p>You can accomplish roughly the same thing in vanilla JavaScript. In my code, when the model changes, it fires a&nbsp;<code>save</code>&nbsp;event, and then I wire&nbsp;<code>App.render()</code>&nbsp;to it, which renders the App using the Todos model.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-js\" data-lang=\"js\">Todos.addEventListener('save', App.render);\n</code></pre>\n</div>\n<p>Template strings end up pretty easy to work with when you want to re-render parts of the App from scratch as a framework would:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-js\" data-lang=\"js\">`\n  &lt;div className=\"view\"&gt;\n    &lt;input className=\"toggle\" type=\"checkbox\" ${todo.completed ? 'checked' : ''}&gt;\n    &lt;label&gt;&lt;/label&gt;\n    &lt;button className=\"destroy\"&gt;&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;input className=\"edit\"&gt;\n`\n</code></pre>\n</div>\n<p>The entire App&nbsp;<code>render</code>&nbsp;method is only eleven lines, and it re-renders everything the App needs to based on the state of the App:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-js\" data-lang=\"js\">render() {\n  const count = Todos.all().length;\n  App.$.setActiveFilter(App.filter);\n  App.$.list.replaceChildren(\n    ...this.Todos.all(this.filter).map((todo) =&gt; this.renderTodo(todo))\n  );\n  App.$.showMain(count);\n  App.$.showFooter(count);\n  App.$.showClear(Todos.hasCompleted());\n  App.$.toggleAll.checked = Todos.isAllCompleted();\n  App.$.displayCount(Todos.all('active').length);\n}\n</code></pre>\n</div>\n<p>Here I could have chosen to rebuild the entire UI as a template string as a function of state, but instead, it is ultimately more performant to create these DOM helper methods and modify what I want.</p>\n<h3 id=\"2-frameworks-provide-input-sanitization\">#2: &ldquo;Frameworks Provide Input Sanitization&rdquo;</h3>\n<p>The best way to sanitize user input is to use&nbsp;<code>node.textContent</code>.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-js\" data-lang=\"js\">insertHTML(li, `\n  &lt;div className=\"view\"&gt;\n    &lt;input className=\"toggle\" type=\"checkbox\" ${todo.completed ? 'checked' : ''}&gt;\n    &lt;label&gt;&lt;/label&gt;\n    &lt;button className=\"destroy\"&gt;&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;input className=\"edit\"&gt;\n`);\nli.querySelector('label').textContent = todo.title;\n</code></pre>\n</div>\n<p>Any user input must be set to the DOM using&nbsp;<code>textContent</code>. If you do that, then you&rsquo;re fine.</p>\n<p>Beyond this, there is a new&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API\">Trusted Types API</a>&nbsp;for sanitizing generated HTML. I would use this new API if I were generating nested markup with dynamic, user-input data. (Note that this new API isn&rsquo;t available yet in Safari, but hopefully, it will be soon)</p>\n<blockquote>\n<p>Trusted Types not being everywhere is fine. You can use them where they&rsquo;re supported and get early warning of issues. Security improves as browsers improve, and usage turns into an incentive for lagging engines (<a href=\"https://twitter.com/slightlylate/status/1523425952218292224\">source</a>)</p>\n</blockquote>\n<p>Suppose you want a library to build your app template strings without using textContent manually. In that case, you can use a library like&nbsp;<a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>, which uses Trusted Types API under the hood.</p>\n<h3 id=\"3-frameworks-provide-dom-diffing-and-dom-diffing-is-necessary\">#3: &ldquo;Frameworks Provide DOM Diffing and DOM Diffing is Necessary&rdquo;</h3>\n<p>The most common criticism was the lack of DOM Diffing in vanilla JavaScript.</p>\n<blockquote>\n<p>A reactive UI/diff engine is non-negotiable for me.</p>\n</blockquote>\n<blockquote>\n<p>Diffing is exactly what you need to do (barring newer methods like svelte) to figure out what to tell the browser to change. The vdom tree is much faster to manipulate than DOM nodes.</p>\n</blockquote>\n<p>However, I think this is a much more balanced take:</p>\n<blockquote>\n<p>Diffing seems necessary when your UI gets complicated to the level that a small change requires a full page re-render. However, I don&rsquo;t think this is necessary for at least 95% of the websites on the internet.</p>\n</blockquote>\n<p>I agree most websites and web apps don&rsquo;t suffer from this issue, even when re-rendering the needed components based on vanilla&rsquo;s application state like a framework.</p>\n<p>Lastly, I&rsquo;ll note that DOM diffing is inefficient for getting reactive updates because it doubles up data structures. Lit, Svelte, Stencil, Solid, and many others don&rsquo;t need it and are way more performant as a result. These approaches win on performance and memory use, which matters because garbage collection hurts the UX.</p>\n<div className=\"hot-take\">\n<p><strong>Hot Take:</strong>&nbsp;Modern frameworks necessitate that you render the entire App client-side which makes your apps slow by default.</p>\n</div>\n<p>My issue with modern frameworks forcing declarative UI (see #1) and DOM diffing (see #2) approach is that they necessitate unnecessary rendering and slow startup times. Remix is trying to avoid this by rendering server-side then &ldquo;hydrating,&rdquo; and new approaches like Quik are trying not to have hydration altogether. It&rsquo;s an industry-wide problem, and people are trying to address it.</p>\n<p>In my vanilla JavaScript projects, I only re-render the most minimal parts of the page necessary. Template strings everywhere, and especially adding DOM diffing, is inefficient. It forces you to render all of your App client-side increasing startup time and the amount the client has to do overall each time data changes.</p>\n<p>That said, if you do need DOM diffing in parts of a vanilla app, libraries like&nbsp;<a href=\"https://github.com/patrick-steele-idem/morphdom\">morphdom</a>&nbsp;do just that. There is also a fantastic templating library called&nbsp;<a href=\"https://lit.dev/docs/v1/lit-html/introduction/\">Lit-html</a>&nbsp;that solves this problem of making your App more declarative in a tiny package (~3KB), and you can continue using template strings with that.</p>\n<h3 id=\"4-frameworks-scale-vanilla-javascript-will-never-scale\">#4: &ldquo;Frameworks Scale, Vanilla JavaScript Will Never Scale&rdquo;</h3>\n<p>I have built many large vanilla JavaScript projects and scaled them across developers, making the companies I worked for tons of money, and these apps still exist today. \uD83D\uDD7A✨</p>\n<p>Conventions and idioms are always needed, no matter if you build on top of a framework or not.</p>\n<div className=\"hot-take\">\n<p><strong>Hot Take:</strong>&nbsp;At the end of the day, your codebase will only be only as good as your team, not the framework.</p>\n</div>\n<p>The way vanilla JS scales is the same way any framework scales. You have to have intelligent people talk about the needs of the codebase and project.</p>\n<p><strong>App Architecture Branch</strong>:</p>\n<p>That said, here&rsquo;s an example of adding ~20 lines of structure to the code in the&nbsp;<a href=\"https://github.com/1Marc/todomvc-vanillajs-2022/tree/app-architecture/js\">app architecture branch</a>. It splits the code into a&nbsp;<code>TodoList</code>&nbsp;and&nbsp;<code>App</code>&nbsp;component. Each component implements a render method that optionally renders a filtered view of the data.</p>\n<p>Overall I&rsquo;d argue these solutions are more performant, less code (~200 lines only), and more straightforward than most, if not all, the TodoMVC implementations on the internet&nbsp;<em>without</em>&nbsp;a framework.</p>\n<h2 id=\"here-are-eight-vanilla-javascript-tips-from-the-code\">Here are Eight Vanilla JavaScript Tips from the Code</h2>\n<h3 id=\"1-sanitization\">#1. Sanitization</h3>\n<p>User input must be sanitized before being displayed in the HTML to prevent XSS (Cross-Site Scripting). Therefore new todo titles are added to the template string using&nbsp;<code>textContent</code>:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">li.querySelector('label').textContent = todo.title;\n</code></pre>\n</div>\n<h3 id=\"2-event-delegation\">#2. Event Delegation</h3>\n<p>Since we render the todos frequently, it doesn&rsquo;t make sense to bind event listeners and clean them up every time. Instead, we bind our events to the parent list that always exists in the DOM and infer which todo was clicked or edited by setting the data attribute of the item&nbsp;<code>$li.dataset.id = todo.id;</code></p>\n<p>Event delegation uses the&nbsp;<code>matches</code>&nbsp;selector:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">export const delegate = (el, selector, event, handler) =&gt; {\n  el.addEventListener(event, e =&gt; {\n    if (e.target.matches(selector)) handler(e, el);\n  });\n}\n</code></pre>\n</div>\n<p>When something inside the list is clicked, we read that data attribute id from the inner list item and use it to grab the todo from the model:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">delegate(App.$.list, selector, event, e =&gt; {\n  let $el = e.target.closest('[data-id]');\n  handler(Todos.get($el.dataset.id), $el, e);\n});\n</code></pre>\n</div>\n<h3 id=\"3-insertadjacenthtml\">#3. insertAdjacentHTML</h3>\n<p>insertAdjacentHTML is&nbsp;<a href=\"https://www.measurethat.net/Benchmarks/Show/10750/0/insertadjacenthtml-vs-innerhtml#latest_results_block\">much faster</a>&nbsp;than innerHTML because it doesn&rsquo;t have to destroy the DOM first before inserting.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">export const insertHTML = (el, html) =&gt; {\n  el.insertAdjacentHTML(\"afterbegin\", html);\n}\n</code></pre>\n</div>\n<p>Bonus tip:&nbsp;<a href=\"https://twitter.com/jon_neal\">Jonathan Neal</a>&nbsp;taught me through a PR that you can empty elements and replace the contents with&nbsp;<code>el.replaceChildren()</code>&nbsp;&mdash; thanks Jonathan!</p>\n<h3 id=\"4-grouping-dom-selectors--methods\">#4. Grouping DOM Selectors &amp; Methods</h3>\n<p>DOM selectors and modifications are scoped to the&nbsp;<code>App.$.*</code>&nbsp;namespace. In a way, it makes it self-documenting what our App could potentially modify in the document.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">$: {\n  input: document.querySelector('[data-todo=\"new\"]'),\n  toggleAll: document.querySelector('[data-todo=\"toggle-all\"]'),\n  clear: document.querySelector('[data-todo=\"clear-completed\"]'),\n  list: document.querySelector('[data-todo=\"list\"]'),\n  count: document.querySelector('[data-todo=\"count\"]'),\n  showMain(show) {\n    document.querySelector('[data-todo=\"main\"]').style.display = show ? 'block': 'none';\n  },\n  showFooter(show) {\n    document.querySelector('[data-todo=\"main\"]').style.display = show ? 'block': 'none';\n  },\n  showClear(show) {\n    App.$.clear.style.display = show ? 'block': 'none';\n  },\n  setActiveFilter(filter) {\n    document.querySelectorAll('[data-todo=\"filters\"] a').forEach(el =&gt; el.classList.remove('selected')),\n    document.querySelector(`[data-todo=\"filters\"] [href=\"#/${filter}\"]`).classList.add('selected');\n  },\n  displayCount(count) {\n    replaceHTML(App.$.count, `\n      &lt;strong&gt;${count}&lt;/strong&gt;\n      ${count === 1 ? 'item' : 'items'} left\n    `);\n  }\n},\n</code></pre>\n</div>\n<h3 id=\"5-send-events-on-a-class-instance-with-subclassing-eventtarget\">#5. Send Events on a Class Instance with Subclassing EventTarget</h3>\n<p>We can subclass EventTarget to send out events on a class instance for our App to bind to:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">export const TodoStore = class extends EventTarget {\n</code></pre>\n</div>\n<p>In this case, when the store updates, it sends an event:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">this.dispatchEvent(new CustomEvent('save'));\n</code></pre>\n</div>\n<p>The App listens to that event and re-renders itself based on the new store data:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">Todos.addEventListener('save', App.render);\n</code></pre>\n</div>\n<h3 id=\"6-group-setting-up-event-listeners\">#6. Group Setting Up Event Listeners</h3>\n<p>It is essential to know exactly where the global event listeners are set. An excellent place to do that is in the App init method:</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-javascript\" data-lang=\"javascript\">init() {\n  Todos.addEventListener('save', App.render);\n  App.filter = getURLHash();\n  window.addEventListener('hashchange', () =&gt; {\n    App.filter = getURLHash();\n    App.render();\n  });\n  App.$.input.addEventListener('keyup', e =&gt; {\n    if (e.key === 'Enter' &amp;&amp; e.target.value.length) {\n      Todos.add({ title: e.target.value, completed: false, id: \"id_\" + Date.now() })\n      App.$.input.value = '';\n    }\n  });\n  App.$.toggleAll.addEventListener('click', e =&gt; {\n    Todos.toggleAll();\n  });\n  App.$.clear.addEventListener('click', e =&gt; {\n    Todos.clearCompleted();\n  });\n  App.bindTodoEvents();\n  App.render();\n},\n</code></pre>\n</div>\n<p>Here we set up all the global event listeners, subscribe to the store mentioned above, and then initially render the App.</p>\n<p>Similarly, when you create new DOM elements and insert them into the page, group the event listeners associated with the new elements near where they are made.</p>\n<h3 id=\"7-use-data-attributes-in-markup--selectors\">#7. Use Data Attributes in Markup &amp; Selectors</h3>\n<p>One issue with JavaScript is your selectors get tightly coupled to the generated DOM.</p>\n<p>To fix this, classes should be used for CSS rules, and data atributes for JavaScript behavior.</p>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-html\" data-lang=\"html\">&lt;div data-jsmodule=\"behavior\"&gt;&lt;/div&gt;\n</code></pre>\n</div>\n<div className=\"highlight\">\n<pre tabindex=\"0\"><code className=\"language-js\" data-lang=\"js\">document.querySelector('[data-jsmodule=\"behavior\"]')\n</code></pre>\n</div>\n<h3 id=\"8-render-the-state-of-the-world-based-on-data-data-flowing-down\">#8. Render the State of the World Based on Data (Data Flowing Down)</h3>\n<p>Lastly, to reiterate what I said above, render everything based on the state in the&nbsp;<code>render()</code>&nbsp;method. This is a pattern lifted from modern frameworks.</p>\n<h4 id=\"make-sure-you-update-the-dom-based-on-your-app-state-not-the-other-way-around\">Make sure you update the DOM based on your App state, not the other way around.</h4>\n<p>It&rsquo;s even better if you avoid reading DOM to derive&nbsp;<em>any</em>&nbsp;part of your app state aside from finding your target for event delegation.</p>\n<p>Side note: I like to rely on the server to generate the markup for faster boot times, then take control of the bits we show. Have the CSS initially hide things you don&rsquo;t need, and then have the JavaScript show the elements based on the state. Let the server do most of the work where you can, rather than wait for the entire App to render client-side.</p>\n<h2 id=\"in-conclusion\">In Conclusion</h2>\n<h3 id=\"vanilla-js-is-viable-today-for-building-web-apps\">Vanilla JS is Viable Today for Building Web Apps</h3>\n<p>JavaScript is better today than it has ever been.</p>\n<p>The fact that I could shave off 80% of the code over the previous TodoMVC years ago at the drop of a hat feels terrific. Plus, we now have established design patterns that we can lift from modern frameworks to apply to vanilla JavaScript projects to make our UIs as declarative as we like.</p>\n<div className=\"hot-take\">\n<p><strong>Hot Take:</strong>&nbsp;As an industry we should consider pure JavaScript as an option for more projects.</p>\n</div>\n<p>Finally, as Web Components get more ergonomic, we will even have a way to share our code in an interoperable and framework-agnostic way.</p>\n<p>I hope you enjoyed the post. Please send your feedback to me&nbsp;<a href=\"https://twitter.com/1Marc\">@1marc on Twitter</a>. Cheers!</p>\n<hr>\n<h2 id=\"bonus-performant-rendering-of-large-lists\">Bonus: Performant Rendering of Large Lists</h2>\n<p>The code for rendering the entire list contents on model change is clean because data flows down, but it potentially will not be as performant for rendering large lists.</p>\n<h3 id=\"more-performant--granular-dom-updates-with-vanilla\">More Performant &amp; Granular DOM Updates with Vanilla</h3>\n<p>Here&rsquo;s a branch sending specific events with context from the model so we can make DOM updates more selectively as we need them: (<a href=\"https://github.com/1Marc/todomvc-vanillajs-2022/commit/fc89da1a6bd15489d5256575a4e193e11efd8d43\">see granular DOM updates diff</a>).</p>\n<p><a href=\"https://github.com/1Marc/modern-todomvc-vanillajs/tree/performant-rendering\">performant-rendering branch</a></p>\n<h3 id=\"more-performant-dom-updates-with-lit-html-plus-animations\">More Performant DOM Updates with lit-html (plus animations!)</h3>\n<p>We can acheieve the same performant DOM updates with far less code by adopting lit-html using the repeat directive: (<a href=\"https://github.com/1Marc/todomvc-vanillajs-2022/commit/ef86a73166029991dc88c649f7ec4931a2a96c86\">see adding lit-html diff</a>).</p>",
      "image": "/assets/img/post8-min.jpg",
      "author": "Marc Grabanski",
      "history": "Sep 8"
    }
  ]
}